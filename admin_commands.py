"""
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –±–æ—Ç–∞ Anora
–í—ã–Ω–µ—Å–µ–Ω—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ bot.py
"""

import logging
from datetime import datetime, timedelta
from typing import Optional
import io
import json

from aiogram import Router, Bot
from aiogram.filters import Command
from aiogram.types import Message, BufferedInputFile

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
admin_router = Router()

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏)
ADMIN_IDS = [556828139]

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS

@admin_router.message(Command("users"))
async def export_users_command(message: Message):
    """
    –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ ID –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return
    
    try:
        await message.answer("üìä –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é —Ñ–∞–π–ª —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        async with admin_router.db.acquire() as conn:
            cursor = await conn.execute("""
                SELECT id, username, join_date, last_active, source
                FROM users
                ORDER BY id
            """)
            
            users_data = []
            async for row in cursor:
                users_data.append({
                    'id': row['id'],
                    'username': row['username'] or 'no_username',
                    'join_date': row['join_date'],
                    'last_active': row['last_active'],
                    'source': row['source'] or 'direct'
                })
        
        # –°–æ–∑–¥–∞–µ–º –¥–≤–∞ —Ñ–∞–π–ª–∞: –ø—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ ID –∏ JSON —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        
        # –§–∞–π–ª 1: –ü—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ ID (–¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π)
        ids_content = '\n'.join(str(user['id']) for user in users_data)
        ids_file = BufferedInputFile(
            ids_content.encode('utf-8'),
            filename=f"user_ids_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        )
        
        # –§–∞–π–ª 2: JSON —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏)
        json_content = json.dumps(users_data, ensure_ascii=False, indent=2)
        json_file = BufferedInputFile(
            json_content.encode('utf-8'),
            filename=f"users_full_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
        await message.answer_document(
            ids_file,
            caption=f"üìã –°–ø–∏—Å–æ–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                   f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_data)}"
        )
        
        await message.answer_document(
            json_file,
            caption="üìä –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (JSON)"
        )
        
        logger.info(f"[ADMIN] User {message.from_user.id} exported {len(users_data)} user IDs")
        
    except Exception as e:
        logger.error(f"[ADMIN] Error exporting users: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}")

@admin_router.message(Command("gift"))
async def gift_subscription_command(message: Message):
    """
    –í—ã–¥–∞–µ—Ç –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    –§–æ—Ä–º–∞—Ç: /gift @username –¥–Ω–µ–π
    –ü—Ä–∏–º–µ—Ä: /gift @user123 30
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        args = message.text.split()
        if len(args) != 3:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/gift @username –¥–Ω–µ–π`\n"
                "–ü—Ä–∏–º–µ—Ä: `/gift @user123 30`",
                parse_mode="Markdown"
            )
            return
        
        username = args[1].lstrip('@')  # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
        try:
            days = int(args[2])
            if days <= 0:
                raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
        except ValueError as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            return
        
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        async with admin_router.db.acquire() as conn:
            cursor = await conn.execute(
                "SELECT id, name FROM users WHERE username = ?",
                (username,)
            )
            user_row = await cursor.fetchone()
            
            if not user_row:
                await message.answer(
                    f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n\n"
                    "–í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –Ω–∞—á–∏–Ω–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º"
                )
                return
            
            user_id = user_row['id']
            user_name = user_row['name'] or username
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
            cursor = await conn.execute(
                "SELECT expires_at FROM subscriptions WHERE user_id = ?",
                (user_id,)
            )
            sub_row = await cursor.fetchone()
            
            # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
            if sub_row and sub_row['expires_at']:
                try:
                    current_expires = datetime.fromisoformat(sub_row['expires_at'])
                    if current_expires > datetime.now():
                        # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
                        new_expires = current_expires + timedelta(days=days)
                        action = "–ø—Ä–æ–¥–ª–µ–Ω–∞"
                    else:
                        # –°—Ç–∞—Ä–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞, –≤—ã–¥–∞–µ–º –Ω–æ–≤—É—é
                        new_expires = datetime.now() + timedelta(days=days)
                        action = "–≤—ã–¥–∞–Ω–∞"
                except:
                    new_expires = datetime.now() + timedelta(days=days)
                    action = "–≤—ã–¥–∞–Ω–∞"
            else:
                # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
                new_expires = datetime.now() + timedelta(days=days)
                action = "–≤—ã–¥–∞–Ω–∞"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            await conn.execute(
                "INSERT OR REPLACE INTO subscriptions (user_id, expires_at) VALUES (?, ?)",
                (user_id, new_expires.isoformat())
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        await message.answer(
            f"‚úÖ **–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ {action}!**\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name} (@{username})\n"
            f"üÜî ID: `{user_id}`\n"
            f"üìÖ –°—Ä–æ–∫: {days} –¥–Ω–µ–π\n"
            f"‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {new_expires.strftime('%d.%m.%Y %H:%M')}\n",
            parse_mode="Markdown"
        )
        
        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await admin_router.bot.send_message(
                user_id,
                f"üéÅ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!**\n\n"
                f"–í–∞–º –±—ã–ª–∞ –ø–æ–¥–∞—Ä–µ–Ω–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {days} –¥–Ω–µ–π!\n\n"
                f"‚ú® –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã:\n"
                f"‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
                f"‚Ä¢ –í—Å–µ –ø—Ä–µ–º–∏—É–º –º–æ–¥–µ–ª–∏\n"
                f"‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (150/–º–µ—Å—è—Ü)\n\n"
                f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {new_expires.strftime('%d.%m.%Y')}\n\n"
                f"–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è —Å –ê–Ω–æ—Ä–æ–π! üíã",
                parse_mode="Markdown"
            )
            await message.answer("üì® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –ø–æ–¥–∞—Ä–∫–µ")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞)")
        
        logger.info(
            f"[ADMIN] User {message.from_user.id} gifted {days} days subscription "
            f"to @{username} (ID: {user_id})"
        )
        
    except Exception as e:
        logger.error(f"[ADMIN] Error gifting subscription: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø–æ–¥–ø–∏—Å–∫–∏: {str(e)}")

@admin_router.message(Command("db_clean"))
async def clean_database_command(message: Message):
    """
    –û—á–∏—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –Ω–æ —É–¥–∞–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–æ–≤.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return
    
    try:
        await message.answer("üßπ –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        async with admin_router.db.acquire() as conn:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±—É–¥–µ—Ç –æ—á–∏—â–µ–Ω–æ
            cursor = await conn.execute("""
                SELECT COUNT(*) as count
                FROM users
                WHERE context IS NOT NULL AND context != '[]'
            """)
            row = await cursor.fetchone()
            contexts_to_clean = row['count'] if row else 0
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
            cursor = await conn.execute("""
                SELECT COUNT(*) as count
                FROM messages
                WHERE datetime(ts) < datetime('now', '-7 days')
            """)
            row = await cursor.fetchone()
            messages_to_delete = row['count'] if row else 0
            
            # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await conn.execute("""
                UPDATE users
                SET context = '[]'
                WHERE context IS NOT NULL AND context != '[]'
            """)
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
            await conn.execute("""
                DELETE FROM messages
                WHERE datetime(ts) < datetime('now', '-7 days')
            """)
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ daily_messages (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
            await conn.execute("""
                DELETE FROM daily_messages
                WHERE date < date('now', '-30 days')
            """)
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ monthly_images (—Å—Ç–∞—Ä—à–µ 3 –º–µ—Å—è—Ü–µ–≤)
            await conn.execute("""
                DELETE FROM monthly_images
                WHERE datetime(month || '-01') < datetime('now', '-3 months')
            """)
            
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await conn.execute("VACUUM")
            await conn.execute("ANALYZE")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –ë–î –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
            cursor = await conn.execute("SELECT page_count * page_size as size FROM pragma_page_count(), pragma_page_size()")
            row = await cursor.fetchone()
            db_size_bytes = row['size'] if row else 0
            db_size_mb = db_size_bytes / (1024 * 1024)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
        report = (
            "‚úÖ **–û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
            f"üîπ –û—á–∏—â–µ–Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤: {contexts_to_clean}\n"
            f"üîπ –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_to_delete}\n"
            f"üîπ –†–∞–∑–º–µ—Ä –ë–î –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {db_size_mb:.2f} MB\n\n"
            "üìù –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ (VACUUM + ANALYZE)"
        )
        
        await message.answer(report, parse_mode="Markdown")
        
        logger.info(
            f"[ADMIN] User {message.from_user.id} cleaned DB: "
            f"{contexts_to_clean} contexts, {messages_to_delete} messages"
        )
        
    except Exception as e:
        logger.error(f"[ADMIN] Error cleaning database: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ë–î: {str(e)}")

def setup_admin_commands(dp, database, bot_instance):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ bot.py –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ database –∏ bot –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ö–µ–Ω–¥–ª–µ—Ä–∞—Ö
    admin_router.db = database
    admin_router.bot = bot_instance
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä
    dp.include_router(admin_router)
    logger.info("[ADMIN] Administrative commands registered")