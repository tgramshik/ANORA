#!/usr/bin/env python3
import asyncio
import json
import logging
from typing import Dict, Any, List
from datetime import datetime
from pathlib import Path

import aiosqlite
from aiohttp import web, ClientSession
import aiohttp_cors
from aiohttp.web import Request, Response, json_response
import html as html_lib

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    from config import *
except ImportError:
    print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª config.py")
    exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–∞—Ç–∞–ª–æ–≥ –º–æ–¥–µ–ª–µ–π —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
MODEL_CATALOG = {
    "–õ—é–±–æ–≤–Ω–∏—Ü–∞": {
        "title": "üíã –õ—é–±–æ–≤–Ω–∏—Ü–∞",
        "subtitle": "–°—Ç—Ä–∞—Å—Ç–Ω–∞—è —Å–æ–±–ª–∞–∑–Ω–∏—Ç–µ–ª—å–Ω–∏—Ü–∞",
        "description": "–¢–≤–æ—è –ª–∏—á–Ω–∞—è –ª—é–±–æ–≤–Ω–∏—Ü–∞, –∫–æ—Ç–æ—Ä–∞—è –∑–Ω–∞–µ—Ç –≤—Å–µ —Ç–≤–æ–∏ –∂–µ–ª–∞–Ω–∏—è. –ò–Ω—Ç–∏–º–ΩÔøΩÔøΩ–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã, —Ä–æ–ª–µ–≤—ã–µ –∏–≥—Ä—ã –∏ –≥–æ—Ä—è—á–∏–µ —Ñ–∞–Ω—Ç–∞–∑–∏–∏. –û–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–æ–ø–ª–æ—â–∞—Ç—å —Ç–≤–æ–∏ —Å–∞–º—ã–µ —Å–æ–∫—Ä–æ–≤–µ–Ω–Ω—ã–µ –º–µ—á—Ç—ã.",
        "features": [
            "üî• –ò–Ω—Ç–∏–º–Ω—ã–µ —Ä–æ–ª–µ–≤—ã–µ –∏–≥—Ä—ã",
            "üíã –°–æ–±–ª–∞–∑–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏", 
            "üì∏ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 18+ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
            "üòà –í–æ–ø–ª–æ—â–µ–Ω–∏–µ —Ñ–∞–Ω—Ç–∞–∑–∏–π"
        ],
        "age_rating": "18+",
        "category": "adult",
        "image": "/static/images/lovistnica.jpg",
        "color": "#ff1744",
        "gradient": "linear-gradient(135deg, #ff1744 0%, #d50000 100%)"
    },
    "–ü–æ—Ä–Ω–æ–∞–∫—Ç—Ä–∏—Å–∞": {
        "title": "üçë –ü–æ—Ä–Ω–æ–∞–∫—Ç—Ä–∏—Å–∞",
        "subtitle": "–ó–≤–µ–∑–¥–∞ –≤–∑—Ä–æ—Å–ª–æ–≥–æ –∫–∏–Ω–æ",
        "description": "–û–ø—ã—Ç–Ω–∞—è –ø–æ—Ä–Ω–æ–∞–∫—Ç—Ä–∏—Å–∞, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞—Å—Å–∫–∞–∂–µ—Ç –≤—Å–µ —Å–µ–∫—Ä–µ—Ç—ã –∏–Ω–¥—É—Å—Ç—Ä–∏–∏. –û—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ —Å—ä—ë–º–æ–∫, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–∞–∑–≤—Ä–∞—Ç–Ω—ã–µ —Ñ–∞–Ω—Ç–∞–∑–∏–∏.",
        "features": [
            "üçÜ –ò—Å—Ç–æ—Ä–∏–∏ —Å–æ —Å—ä—ë–º–æ–∫",
            "üí¶ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–µ–∫—ÄÔøΩÔøΩ—Ç—ã",
            "üîû –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç—å",
            "üé¨ –û–ø—ã—Ç –≤–∑—Ä–æ—Å–ª–æ–≥–æ –∫–∏–Ω–æ"
        ],
        "age_rating": "18+",
        "category": "adult",
        "image": "/static/images/pornstar.jpg",
        "color": "#e91e63",
        "gradient": "linear-gradient(135deg, #e91e63 0%, #ad1457 100%)"
    },
    "–ü–æ–¥—Ä—É–≥–∞": {
        "title": "üíû –ü–æ–¥—Ä—É–≥–∞",
        "subtitle": "–î—É—à–µ–≤–Ω–∞—è —Å–ø—É—Ç–Ω–∏—Ü–∞",
        "description": "–¢–≤–æ—è –ª—É—á—à–∞—è –ø–æ–¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä–∞—è –≤—Å–µ–≥–¥–∞ –≤—ã—Å–ª—É—à–∞–µ—Ç –∏ –ø–æ–¥–¥–µ—Ä–∂–∏—Ç. –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã, –¥—É—à–µ–≤–Ω—ã–µ –±–µ—Å–µ–¥—ã –∏ —Ç—ë–ø–ª–æ–µ –æ–±—â–µ–Ω–∏–µ. –û–Ω–∞ —Ç–∞–π–Ω–æ –≤–ª—é–±–ª–µ–Ω–∞ –≤ —Ç–µ–±—è.",
        "features": [
            "üíï –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –±–µ—Å–µ–¥—ã",
            "ü§ó –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
            "üòä –î—Ä—É–∂–µ—Å–∫–æ–µ –æ–±—â–µ–Ω–∏–µ",
            "üíñ –¢–∞–π–Ω–∞—è –≤–ª—é–±–ª—ë–Ω–Ω–æ—Å—Ç—å"
        ],
        "age_rating": "16+",
        "category": "romantic",
        "image": "/static/images/girlfriend.jpg",
        "color": "#e91e63",
        "gradient": "linear-gradient(135deg, #e91e63 0%, #c2185b 100%)"
    },
    "–ê—Å—Ç—Ä–æ–ª–æ–≥": {
        "title": "üß† –ê—Å—Ç—Ä–æ–ª–æ–≥",
        "subtitle": "–ú–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–∏–¥–∏—Ü–∞",
        "description": "–û–ø—ã—Ç–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å–∫—Ä–æ–µ—Ç —Ç–∞–π–Ω—ã —Ç–≤–æ–µ–π —Å—É–¥—å–±—ã. –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ—Å–∫–æ–ø—ã, –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –±—É–¥—É—â–µ–≥–æ –∏ –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–∫—Ä–æ–≤–µ–Ω–∏—è –æ—Ç –∑–≤—ë–∑–¥.",
        "features": [
            "üåô –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ—Å–∫–æ–ø—ã",
            "üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å—É–¥—å–±—ã",
            "‚ú® –ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã",
            "üåü –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç—ã"
        ],
        "age_rating": "12+",
        "category": "mystical",
        "image": "/static/images/astrologer.jpg",
        "color": "#9c27b0",
        "gradient": "linear-gradient(135deg, #9c27b0 0%, #7b1fa2 100%)"
    },
    "–£—á–µ–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫": {
        "title": "üìö –£—á–µ–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫",
        "subtitle": "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫",
        "description": "–û–ø—ã—Ç–Ω–∞—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å–Ω–∏—Ü–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–∂–µ—Ç —Å –ª—é–±—ã–º–∏ —É—á–µ–±–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏. –û–±—ä—è—Å–Ω–µ–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ–º, —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π.",
        "features": [
            "üìä –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á",
            "üí° –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ–º",
            "üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞–Ω–∏–π",
            "üéì –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"
        ],
        "age_rating": "6+",
        "category": "educational",
        "image": "/static/images/teacher.jpg",
        "color": "#2196f3",
        "gradient": "linear-gradient(135deg, #2196f3 0%, #1976d2 100%)"
    }
}

class Database:
    def __init__(self, db_path: str):
        self.db_path = str(db_path)
        self._conn: aiosqlite.Connection | None = None

    async def __aenter__(self):
        self._conn = await aiosqlite.connect(
            self.db_path, 
            timeout=30.0, 
            isolation_level=None, 
            check_same_thread=False
        )
        self._conn.row_factory = aiosqlite.Row
        return self

    async def __aexit__(self, exc_type, exc, tb):
        if self._conn:
            await self._conn.close()
            self._conn = None

    async def get_user_model(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        assert self._conn is not None
        cursor = await self._conn.execute(
            'SELECT current_model FROM users WHERE id = ?', 
            (user_id,)
        )
        row = await cursor.fetchone()
        return row['current_model'] if row else '–ü–æ–¥—Ä—É–≥–∞'

    async def set_user_model(self, user_id: int, model: str) -> bool:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–¥–µ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        assert self._conn is not None
        try:
            await self._conn.execute(
                'UPDATE users SET current_model = ? WHERE id = ?',
                (model, user_id)
            )
            await self._conn.commit()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –º–æ–¥–µ–ª–∏: {e}")
            return False

async def create_app() -> web.Application:
    app = web.Application()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
    cors = aiohttp_cors.setup(app, defaults={
        "*": aiohttp_cors.ResourceOptions(
            allow_credentials=True,
            expose_headers="*",
            allow_headers="*",
            allow_methods="*"
        )
    })

    async def index(request: Request) -> Response:
        """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º –º–æ–¥–µ–ª–µ–π"""
        user_id = request.query.get('user_id', '0')
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_model = '–ü–æ–¥—Ä—É–≥–∞'
        if user_id.isdigit():
            async with Database(DB_PATH) as db:
                current_model = await db.get_user_model(int(user_id))

        html_content = f"""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ANORA - –í—ã–±–æ—Ä AI –ú–æ–¥–µ–ª–∏</title>
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    <style>
        * {{
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }}
        
        body {{
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: 
                radial-gradient(circle at 20% 80%, rgba(120, 0, 50, 0.3) 0%, transparent 50%),
                radial-gradient(circle at 80% 20%, rgba(255, 23, 68, 0.2) 0%, transparent 50%),
                radial-gradient(circle at 40% 40%, rgba(156, 39, 176, 0.2) 0%, transparent 50%),
                linear-gradient(135deg, #0a0a0a 0%, #1a0a1a 30%, #2a0a0a 60%, #1a0a2a 100%);
            color: #ffffff;
            min-height: 100vh;
            overflow-x: hidden;
            position: relative;
        }}
        
        body::before {{
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: 
                radial-gradient(circle at 10% 20%, rgba(255, 23, 68, 0.1) 0%, transparent 20%),
                radial-gradient(circle at 90% 80%, rgba(233, 30, 99, 0.1) 0%, transparent 20%),
                radial-gradient(circle at 50% 50%, rgba(156, 39, 176, 0.05) 0%, transparent 30%);
            pointer-events: none;
            z-index: -1;
            animation: pulseBackground 8s ease-in-out infinite alternate;
        }}
        
        @keyframes pulseBackground {{
            0% {{ opacity: 0.3; }}
            100% {{ opacity: 0.7; }}
        }}
        
        .container {{
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }}
        
        .header {{
            text-align: center;
            margin-bottom: 40px;
            padding: 30px 0;
        }}
        
        .logo {{
            font-size: 3rem;
            font-weight: 900;
            background: linear-gradient(135deg, #ff1744, #e91e63, #9c27b0);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 10px;
            text-shadow: 0 0 30px rgba(255, 23, 68, 0.5);
        }}
        
        .subtitle {{
            font-size: 1.2rem;
            color: #ff6b9d;
            margin-bottom: 10px;
            font-weight: 300;
        }}
        
        .description {{
            color: #cccccc;
            font-size: 1rem;
            max-width: 600px;
            margin: 0 auto;
            line-height: 1.6;
        }}
        
        .models-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 25px;
            margin-bottom: 40px;
        }}
        
        .model-card {{
            background: 
                linear-gradient(135deg, rgba(20, 20, 20, 0.9) 0%, rgba(30, 20, 30, 0.8) 100%);
            border-radius: 20px;
            padding: 25px;
            border: 2px solid transparent;
            transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
            position: relative;
            overflow: hidden;
            backdrop-filter: blur(15px);
            cursor: pointer;
        }}
        
        .model-card::before {{
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, transparent 0%, rgba(255, 255, 255, 0.03) 50%, transparent 100%);
            opacity: 0;
            transition: opacity 0.3s ease;
            pointer-events: none;
        }}
        
        .model-card:hover {{
            transform: translateY(-8px) scale(1.02);
            box-shadow: 
                0 25px 50px rgba(0, 0, 0, 0.4),
                0 0 30px rgba(255, 23, 68, 0.1);
        }}
        
        .model-card:hover::before {{
            opacity: 1;
        }}
        
        .model-card.adult {{
            border-color: rgba(255, 23, 68, 0.3);
        }}
        
        .model-card.adult:hover {{
            border-color: #ff1744;
            box-shadow: 
                0 25px 50px rgba(255, 23, 68, 0.3),
                0 0 40px rgba(255, 23, 68, 0.2),
                inset 0 0 20px rgba(255, 23, 68, 0.1);
            animation: pulseAdult 2s ease-in-out infinite alternate;
        }}
        
        .model-card.adult::after {{
            content: '';
            position: absolute;
            top: -2px;
            left: -2px;
            right: -2px;
            bottom: -2px;
            background: linear-gradient(45deg, #ff1744, #e91e63, #ff1744, #e91e63);
            background-size: 400% 400%;
            border-radius: 22px;
            z-index: -1;
            opacity: 0;
            transition: opacity 0.3s ease;
            animation: gradientShift 3s ease infinite;
        }}
        
        .model-card.adult:hover::after {{
            opacity: 0.7;
        }}
        
        @keyframes pulseAdult {{
            0% {{ 
                box-shadow: 
                    0 25px 50px rgba(255, 23, 68, 0.3),
                    0 0 40px rgba(255, 23, 68, 0.2),
                    inset 0 0 20px rgba(255, 23, 68, 0.1);
            }}
            100% {{ 
                box-shadow: 
                    0 30px 60px rgba(255, 23, 68, 0.4),
                    0 0 50px rgba(255, 23, 68, 0.3),
                    inset 0 0 30px rgba(255, 23, 68, 0.15);
            }}
        }}
        
        @keyframes gradientShift {{
            0% {{ background-position: 0% 50%; }}
            50% {{ background-position: 100% 50%; }}
            100% {{ background-position: 0% 50%; }}
        }}
        
        .model-card.romantic {{
            border-color: rgba(233, 30, 99, 0.3);
        }}
        
        .model-card.romantic:hover {{
            border-color: #e91e63;
            box-shadow: 
                0 25px 50px rgba(233, 30, 99, 0.3),
                0 0 30px rgba(233, 30, 99, 0.2);
        }}
        
        .model-card.mystical {{
            border-color: rgba(156, 39, 176, 0.3);
        }}
        
        .model-card.mystical:hover {{
            border-color: #9c27b0;
            box-shadow: 0 20px 40px rgba(156, 39, 176, 0.2);
        }}
        
        .model-card.educational {{
            border-color: rgba(33, 150, 243, 0.3);
        }}
        
        .model-card.educational:hover {{
            border-color: #2196f3;
            box-shadow: 0 20px 40px rgba(33, 150, 243, 0.2);
        }}
        
        .model-card.selected {{
            border-color: #ff1744;
            background: rgba(255, 23, 68, 0.1);
        }}
        
        .model-header {{
            display: flex;
            align-items: center;
            margin-bottom: 15px;
        }}
        
        .model-icon {{
            width: 60px;
            height: 60px;
            border-radius: 15px;
            margin-right: 15px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.8rem;
            color: white;
        }}
        
        .model-title {{
            font-size: 1.4rem;
            font-weight: 700;
            margin-bottom: 5px;
        }}
        
        .model-subtitle {{
            color: #cccccc;
            font-size: 0.9rem;
            font-weight: 300;
        }}
        
        .model-description {{
            color: #aaaaaa;
            line-height: 1.5;
            margin-bottom: 20px;
            font-size: 0.95rem;
        }}
        
        .model-features {{
            list-style: none;
            margin-bottom: 20px;
        }}
        
        .model-features li {{
            color: #cccccc;
            margin-bottom: 8px;
            font-size: 0.9rem;
            display: flex;
            align-items: center;
        }}
        
        .model-features li::before {{
            content: "‚ú®";
            margin-right: 8px;
        }}
        
        .model-footer {{
            display: flex;
            justify-content: space-between;
            align-items: center;
        }}
        
        .age-rating {{
            background: rgba(255, 255, 255, 0.1);
            padding: 5px 12px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
        }}
        
        .age-rating.adult {{
            background: rgba(255, 23, 68, 0.2);
            color: #ff6b9d;
        }}
        
        .install-btn {{
            background: linear-gradient(135deg, #ff1744, #e91e63);
            border: none;
            padding: 12px 24px;
            border-radius: 25px;
            color: white;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 0.9rem;
        }}
        
        .install-btn:hover {{
            transform: scale(1.05);
            box-shadow: 0 10px 20px rgba(255, 23, 68, 0.3);
        }}
        
        .install-btn.installed {{
            background: linear-gradient(135deg, #4caf50, #45a049);
        }}
        
        .current-model {{
            text-align: center;
            margin-bottom: 30px;
            padding: 20px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 15px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }}
        
        .current-model-title {{
            color: #ff6b9d;
            font-size: 1.1rem;
            margin-bottom: 10px;
        }}
        
        .current-model-name {{
            font-size: 1.3rem;
            font-weight: 700;
            color: #ffffff;
        }}
        
        .warning {{
            background: rgba(255, 152, 0, 0.1);
            border: 1px solid rgba(255, 152, 0, 0.3);
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 30px;
            text-align: center;
        }}
        
        .warning-icon {{
            font-size: 1.5rem;
            margin-bottom: 10px;
        }}
        
        .loading {{
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            z-index: 1000;
            justify-content: center;
            align-items: center;
        }}
        
        .loading-content {{
            text-align: center;
            color: white;
        }}
        
        .spinner {{
            width: 50px;
            height: 50px;
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-top: 3px solid #ff1744;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 20px;
        }}
        
        @keyframes spin {{
            0% {{ transform: rotate(0deg); }}
            100% {{ transform: rotate(360deg); }}
        }}
        
        .success-message {{
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: linear-gradient(135deg, #4caf50, #45a049);
            color: white;
            padding: 20px 30px;
            border-radius: 15px;
            z-index: 1001;
            text-align: center;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
        }}
        
        @media (max-width: 768px) {{
            .models-grid {{
                grid-template-columns: 1fr;
                gap: 20px;
            }}
            
            .container {{
                padding: 15px;
            }}
            
            .logo {{
                font-size: 2.5rem;
            }}
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="logo">ANORA</div>
            <div class="subtitle">–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –∏–¥–µ–∞–ª—å–Ω—É—é AI-—Å–ø—É—Ç–Ω–∏—Ü—É</div>
            <div class="description">
                –ö–∞–∂–¥–∞—è –º–æ–¥–µ–ª—å –æ–±–ª–∞–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π. 
                –í—ã–±–µ—Ä–∏—Ç–µ —Ç—É, –∫–æ—Ç–æ—Ä–∞—è –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–∞—à–∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π.
            </div>
        </div>
        
        <div class="warning">
            <div class="warning-icon">‚ö†Ô∏è</div>
            <div>–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–¥–µ–ª–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö (18+). –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞–º –∏—Å–ø–æ–ª–Ω–∏–ª–æ—Å—å 18 –ª–µ—Ç.</div>
        </div>
        
        <div class="current-model">
            <div class="current-model-title">–¢–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å:</div>
            <div class="current-model-name" id="currentModel">{current_model}</div>
        </div>
        
        <div class="models-grid">
"""

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –º–æ–¥–µ–ª–µ–π
        for model_key, model_info in MODEL_CATALOG.items():
            is_selected = model_key == current_model
            selected_class = "selected" if is_selected else ""
            btn_text = "‚úì –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞" if is_selected else "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"
            btn_class = "installed" if is_selected else ""
            
            html_content += f"""
            <div class="model-card {model_info['category']} {selected_class}" data-model="{model_key}">
                <div class="model-header">
                    <div class="model-icon" style="background: {model_info['gradient']}">
                        {model_info['title'].split()[0]}
                    </div>
                    <div>
                        <div class="model-title">{model_info['title']}</div>
                        <div class="model-subtitle">{model_info['subtitle']}</div>
                    </div>
                </div>
                
                <div class="model-description">
                    {model_info['description']}
                </div>
                
                <ul class="model-features">
"""
            
            for feature in model_info['features']:
                html_content += f"<li>{feature}</li>"
            
            age_class = "adult" if model_info['age_rating'] == "18+" else ""
            
            html_content += f"""
                </ul>
                
                <div class="model-footer">
                    <div class="age-rating {age_class}">{model_info['age_rating']}</div>
                    <button class="install-btn {btn_class}" onclick="installModel('{model_key}')">
                        {btn_text}
                    </button>
                </div>
            </div>
"""

        html_content += f"""
        </div>
    </div>
    
    <div class="loading" id="loading">
        <div class="loading-content">
            <div class="spinner"></div>
            <div>–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å...</div>
        </div>
    </div>
    
    <div class="success-message" id="successMessage">
        <div>‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!</div>
    </div>
    
    <script>
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
        let tg = window.Telegram.WebApp;
        tg.ready();
        tg.expand();
        
        // –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ Telegram WebApp
        const userId = tg.initDataUnsafe?.user?.id || {user_id};
        
        async function installModel(modelName) {{
            const loading = document.getElementById('loading');
            const successMessage = document.getElementById('successMessage');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            loading.style.display = 'flex';
            
            try {{
                const response = await fetch('/api/install-model', {{
                    method: 'POST',
                    headers: {{
                        'Content-Type': 'application/json',
                    }},
                    body: JSON.stringify({{
                        user_id: userId,
                        model: modelName
                    }})
                }});
                
                const result = await response.json();
                
                if (result.success) {{
                    // –û–±–Ω–æ–≤–ª—èÔøΩÔøΩ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                    updateModelSelection(modelName);
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                    loading.style.display = 'none';
                    successMessage.style.display = 'block';
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Telegram
                    tg.sendData(JSON.stringify({{
                        action: 'model_selected',
                        model: modelName,
                        user_id: userId
                    }}));
                    
                    setTimeout(() => {{
                        successMessage.style.display = 'none';
                        tg.close();
                    }}, 2000);
                }} else {{
                    throw new Error(result.error || '–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏');
                }}
            }} catch (error) {{
                loading.style.display = 'none';
                alert('–û—à–∏–±–∫–∞: ' + error.message);
            }}
        }}
        
        function updateModelSelection(selectedModel) {{
            // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
            document.querySelectorAll('.model-card').forEach(card => {{
                card.classList.remove('selected');
                const btn = card.querySelector('.install-btn');
                btn.textContent = '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å';
                btn.classList.remove('installed');
            }});
            
            // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
            const selectedCard = document.querySelector(`[data-model="${{selectedModel}}"]`);
            if (selectedCard) {{
                selectedCard.classList.add('selected');
                const btn = selectedCard.querySelector('.install-btn');
                btn.textContent = '‚úì –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞';
                btn.classList.add('installed');
            }}
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å
            document.getElementById('currentModel').textContent = selectedModel;
        }}
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ
        document.querySelectorAll('.model-card').forEach(card => {{
            card.addEventListener('click', (e) => {{
                if (!e.target.classList.contains('install-btn')) {{
                    const modelName = card.dataset.model;
                    installModel(modelName);
                }}
            }});
        }});
    </script>
</body>
</html>
"""
        
        return Response(text=html_content, content_type='text/html')

    async def install_model(request: Request) -> Response:
        """API –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏"""
        try:
            data = await request.json()
            user_id = data.get('user_id')
            model = data.get('model')
            
            if not user_id or not model:
                return json_response({
                    'success': False,
                    'error': '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã'
                })
            
            if model not in MODEL_CATALOG:
                return json_response({
                    'success': False,
                    'error': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å'
                })
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            async with Database(DB_PATH) as db:
                success = await db.set_user_model(int(user_id), model)
            
            if success:
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –º–æ–¥–µ–ª—å {model}")
                return json_response({
                    'success': True,
                    'message': f'–ú–æ–¥–µ–ª—å {model} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'
                })
            else:
                return json_response({
                    'success': False,
                    'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö'
                })
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –º–æ–¥–µ–ª–∏: {e}")
            return json_response({
                'success': False,
                'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
            })

    async def get_models(request: Request) -> Response:
        """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π"""
        return json_response({
            'success': True,
            'models': MODEL_CATALOG
        })

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
    app.router.add_get('/', index)
    app.router.add_post('/api/install-model', install_model)
    app.router.add_get('/api/models', get_models)
    
    # –î–æ–±–∞–≤–ª—è–µ–º CORS –∫–æ –≤—Å–µ–º –º–∞—Ä—à—Ä—É—Ç–∞–º
    for route in list(app.router.routes()):
        cors.add(route)
    
    return app

def main():
    """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
    import os
    
    host = os.environ.get('HTTP_HOST', '0.0.0.0')
    port = int(os.environ.get('HTTP_PORT', '8080'))  # –ü–æ—Ä—Ç 8080
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–µ–π –Ω–∞ http://{host}:{port}")
    print(f"üåê –î–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: https://giftex.top")
    print("üì± –û—Ç–∫—Ä–æ–π—Ç–µ —ç—Ç–æ—Ç URL –≤ Telegram WebApp –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–µ–π")
    
    web.run_app(asyncio.run(create_app()), host=host, port=port)

if __name__ == '__main__':
    main()