import logging
import json
import asyncio
import signal
import aiosqlite
import time
from datetime import datetime, timedelta
from typing import Optional, Dict, Any, List, Tuple
from contextlib import asynccontextmanager
from collections import defaultdict
import os
import sys
try:
    import psutil
except ImportError:
    psutil = None

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandObject
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo, BufferedInputFile, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, FSInputFile
from aiogram.enums import ChatAction
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.fsm.context import FSMContext
import aiohttp
from aiohttp import ClientSession, ClientTimeout
import base64
import re
import traceback
from runware import Runware, IImageInference, ILora
from aiogram.types import PreCheckoutQuery

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    from config import *
except ImportError:
    print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª config.py")
    print("üìã –°–æ–∑–¥–∞–π—Ç–µ config.py –Ω–∞ –æ—Å–Ω–æ–≤–µ config.py.example")
    exit(1)

# –ò–º–ø–æ—Ä—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
try:
    from admin_commands import setup_admin_commands
except ImportError:
    logger.warning("‚ö†Ô∏è –ú–æ–¥—É–ª—å admin_commands.py –Ω–µ –Ω–∞–π–¥–µ–Ω, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    setup_admin_commands = None

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã Flyer
try:
    from flyer_service import FlyerService, init_flyer_service
    flyer_service = None  # –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–∑–∂–µ
except ImportError:
    logger.warning("‚ö†Ô∏è –ú–æ–¥—É–ª—å flyer_service.py –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    FlyerService = None
    init_flyer_service = None
    flyer_service = None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=LOG_LEVEL, format=LOG_FORMAT)
logger = logging.getLogger(__name__)

bot: Optional[Bot] = None
dp = Dispatcher()


MAX_MESSAGE_LENGTH = 4000
MAX_PROMPT_LENGTH = 2000

def validate_input_length(text: str, max_length: int, input_type: str = "message") -> bool:
    if not text:
        return True
    if len(text) > max_length:
        logger.warning(f"Input {input_type} too long: {len(text)} > {max_length} chars")
        return False
    return True

class CriticalErrorMonitor:
    def __init__(self, admin_id: int):
        self.admin_id = admin_id
        self.error_count = defaultdict(int)
        self.last_alert_time = defaultdict(float)
        self.alert_cooldown = 300  # 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –∞–ª–µ—Ä—Ç–∞–º–∏ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞
    
    async def log_critical_error(self, error_type: str, error_msg: str, user_id: int = None):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ª–µ—Ä—Ç –∞–¥–º–∏–Ω—É"""
        self.error_count[error_type] += 1
        
        # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logger.critical(
            f"CRITICAL ERROR [{error_type}]: {error_msg} | "
            f"User: {user_id} | Count: {self.error_count[error_type]}"
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
        now = time.time()
        if now - self.last_alert_time[error_type] > self.alert_cooldown:
            self.last_alert_time[error_type] = now
            
            try:
                alert_msg = (
                    f"üö® <b>–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê</b>\n\n"
                    f"<b>–¢–∏–ø:</b> {error_type}\n"
                    f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {error_msg[:500]}{'...' if len(error_msg) > 500 else ''}\n"
                    f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_id or 'N/A'}\n"
                    f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {self.error_count[error_type]}\n"
                    f"<b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}"
                )
                
                if bot:
                    await bot.send_message(self.admin_id, alert_msg, parse_mode="HTML")
            except Exception as e:
                logger.error(f"Failed to send critical error alert: {e}")

error_monitor = CriticalErrorMonitor(ADMIN_ID)

@dp.update()
async def debug_log(update: types.Update):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ –∞–ø–¥–µ–π—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∞–ø–¥–µ–π—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ WebApp
        if update.message:
            has_webapp = hasattr(update.message, 'web_app_data') and update.message.web_app_data is not None
            if has_webapp:
                logger.info("[RAW-WEBAPP] WebApp data detected! User: %s, Data: %s", 
                           update.message.from_user.id if update.message.from_user else None,
                           update.message.web_app_data)
            logger.debug(
                "[RAW] chat_id=%s user_id=%s has_web_app_data=%s",
                update.message.chat.id,
                update.message.from_user.id if update.message.from_user else None,
                has_webapp,
            )
    except Exception as e:
        logger.error("[RAW] Failed to log update: %s", e)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–ø–¥–µ–π—Ç–∞
last_update_time = time.time()
last_update_lock = asyncio.Lock()

async def update_last_update_time():
    global last_update_time
    async with last_update_lock:
        last_update_time = time.time()

class Database:
    def __init__(self, db_path: str):
        self.db_path = db_path
        self._connection: Optional[aiosqlite.Connection] = None
        self._lock = asyncio.Lock()
        self._initialized = False
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        if self._initialized:
            return
            
        async with self._lock:
            if self._initialized:  # Double-checked locking
                return
                
            # –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            self._connection = await aiosqlite.connect(
                self.db_path,
                timeout=30.0,
                isolation_level=None,
                check_same_thread=False
            )
            
            # –í–∫–ª—é—á–∞–µ–º WAL —Ä–µ–∂–∏–º –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            await self._connection.execute('PRAGMA journal_mode=WAL')
            await self._connection.execute('PRAGMA synchronous=NORMAL')
            await self._connection.execute('PRAGMA cache_size=-2000')  # 2MB –∫—ç—à–∞
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            await self._init_db()
            self._initialized = True
    
    async def _init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        await self._connection.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY,
                username TEXT,
                name TEXT,
                join_date TEXT,
                last_active TEXT,
                current_model TEXT,
                context TEXT,
                source TEXT,
                auto_message BOOLEAN DEFAULT 1
            )
        ''' )
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É auto_message –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±–∞–∑, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        try:
            await self._connection.execute('ALTER TABLE users ADD COLUMN auto_message BOOLEAN DEFAULT 1')
            # –£—Å—Ç–∞–Ω–æ–≤–∏–º auto_message=1 –¥–ª—è –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await self._connection.execute('UPDATE users SET auto_message = 1 WHERE auto_message IS NULL')
        except aiosqlite.Error:
            pass  # –∫–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É bot_blocked –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–≤—à–∏—Ö –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        try:
            await self._connection.execute('ALTER TABLE users ADD COLUMN bot_blocked BOOLEAN DEFAULT 0')
        except aiosqlite.Error:
            pass  # –∫–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        
        # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –æ–±–Ω–æ–≤–∏–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ
        try:
            await self._connection.execute('UPDATE users SET auto_message = 1 WHERE auto_message IS NULL')
        except aiosqlite.Error:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è auto_message –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            
        # –ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        await self._connection.execute('''
            CREATE TABLE IF NOT EXISTS messages (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                model TEXT,
                role TEXT,
                content TEXT,
                ts TEXT,
                FOREIGN KEY(user_id) REFERENCES users(id)
            )
        ''')
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±–∞–∑, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        for col in ('ts TEXT', 'model TEXT', 'role TEXT', 'content TEXT'):
            try:
                await self._connection.execute(f'ALTER TABLE messages ADD COLUMN {col}')
            except aiosqlite.Error:
                pass
        await self._connection.execute('CREATE INDEX IF NOT EXISTS idx_messages_user_ts ON messages(user_id, ts)')
        await self._connection.execute('CREATE INDEX IF NOT EXISTS idx_messages_model_ts ON messages(model, ts)')
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è UTM —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        await self._connection.execute('''
            CREATE TABLE IF NOT EXISTS sources (
                source TEXT PRIMARY KEY,
                users_count INTEGER DEFAULT 0,
                requests_count INTEGER DEFAULT 0
            )
        ''')
        # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É source –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±–∞–∑ (–µ—Å–ª–∏ –æ–Ω–∞ —É–∂–µ –µ—Å—Ç—å, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É)
        try:
            await self._connection.execute('ALTER TABLE users ADD COLUMN source TEXT')
        except aiosqlite.Error:
            pass  # –∫–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥–ø–∏—Å–æ–∫
        await self._connection.execute('''
            CREATE TABLE IF NOT EXISTS subscriptions (
                user_id INTEGER PRIMARY KEY,
                expires_at TEXT,
                FOREIGN KEY(user_id) REFERENCES users(id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Å—É—Ç–∫–∏
        await self._connection.execute('''
            CREATE TABLE IF NOT EXISTS daily_messages (
                user_id INTEGER,
                date TEXT,
                count INTEGER DEFAULT 0,
                PRIMARY KEY (user_id, date),
                FOREIGN KEY(user_id) REFERENCES users(id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞ –º–µ—Å—è—Ü
        await self._connection.execute('''
            CREATE TABLE IF NOT EXISTS monthly_images (
                user_id INTEGER,
                month TEXT,
                count INTEGER DEFAULT 0,
                PRIMARY KEY (user_id, month),
                FOREIGN KEY(user_id) REFERENCES users(id)
            )
        ''')
    
    async def add_message(self, user_id:int, model:str, role:str, content:str):
        async with self.acquire() as conn:
            await conn.execute(
                'INSERT INTO messages (user_id, model, role, content, ts) VALUES (?,?,?,?,?)',
                (user_id, model, role, content, datetime.now().isoformat())
            )

    async def increment_source_user(self, source: str):
        if not source:
            return
        async with self.acquire() as conn:
            await conn.execute(
                'INSERT INTO sources (source, users_count, requests_count) VALUES (?, 1, 0) '
                'ON CONFLICT(source) DO UPDATE SET users_count = users_count + 1',
                (source,)
            )
    
    async def increment_source_request(self, source: str):
        if not source:
            return
        async with self.acquire() as conn:
            await conn.execute(
                'INSERT INTO sources (source, users_count, requests_count) VALUES (?, 0, 1) '
                'ON CONFLICT(source) DO UPDATE SET requests_count = requests_count + 1',
                (source,)
            )
    
    async def get_source_stats(self) -> List[Tuple[str, int, int, int]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º —Å —É—á–µ—Ç–æ–º –ø–æ–∫—É–ø–æ–∫"""
        async with self.acquire() as conn:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            cursor = await conn.execute('''
                SELECT 
                    s.source,
                    s.users_count,
                    s.requests_count,
                    COUNT(DISTINCT CASE WHEN sub.user_id IS NOT NULL THEN u.id END) as premium_count
                FROM sources s
                LEFT JOIN users u ON u.source = s.source
                LEFT JOIN subscriptions sub ON sub.user_id = u.id 
                    AND datetime(sub.expires_at) > datetime('now')
                GROUP BY s.source
                ORDER BY s.users_count DESC
            ''')
            return [tuple(row) async for row in cursor]
    
    async def save_subscription(self, user_id: int, expires_at: datetime):
        async with self.acquire() as conn:
            await conn.execute('REPLACE INTO subscriptions (user_id, expires_at) VALUES (?,?)',
                               (user_id, expires_at.isoformat()))

    async def has_active_subscription(self, user_id: int) -> bool:
        async with self.acquire() as conn:
            cursor = await conn.execute('SELECT expires_at FROM subscriptions WHERE user_id=?', (user_id,))
            row = await cursor.fetchone()
            if not row or not row['expires_at']:
                return False
            try:
                return datetime.fromisoformat(row['expires_at']) >= datetime.now()
            except Exception:
                return False
    
    async def get_daily_message_count(self, user_id: int) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
        today = datetime.now().date().isoformat()
        async with self.acquire() as conn:
            cursor = await conn.execute('SELECT count FROM daily_messages WHERE user_id=? AND date=?', (user_id, today))
            row = await cursor.fetchone()
            return row['count'] if row else 0
    
    async def increment_daily_message_count(self, user_id: int) -> int:
        """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"""
        today = datetime.now().date().isoformat()
        async with self.acquire() as conn:
            await conn.execute(
                'INSERT INTO daily_messages (user_id, date, count) VALUES (?, ?, 1) '
                'ON CONFLICT(user_id, date) DO UPDATE SET count = count + 1',
                (user_id, today)
            )
            cursor = await conn.execute('SELECT count FROM daily_messages WHERE user_id=? AND date=?', (user_id, today))
            row = await cursor.fetchone()
            return row['count'] if row else 0
    
    async def get_monthly_image_count(self, user_id: int) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"""
        current_month = datetime.now().strftime('%Y-%m')
        async with self.acquire() as conn:
            cursor = await conn.execute('SELECT count FROM monthly_images WHERE user_id=? AND month=?', (user_id, current_month))
            row = await cursor.fetchone()
            return row['count'] if row else 0
    
    async def increment_monthly_image_count(self, user_id: int) -> int:
        """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞ –º–µ—Å—è—Ü –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"""
        current_month = datetime.now().strftime('%Y-%m')
        async with self.acquire() as conn:
            await conn.execute(
                'INSERT INTO monthly_images (user_id, month, count) VALUES (?, ?, 1) '
                'ON CONFLICT(user_id, month) DO UPDATE SET count = count + 1',
                (user_id, current_month)
            )
            cursor = await conn.execute('SELECT count FROM monthly_images WHERE user_id=? AND month=?', (user_id, current_month))
            row = await cursor.fetchone()
            return row['count'] if row else 0

    @asynccontextmanager
    async def acquire(self):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º"""
        if not self._connection:
            await self.initialize()
            
        try:
            self._connection.row_factory = aiosqlite.Row
            yield self._connection
            await self._connection.commit()
        except Exception as e:
            if self._connection:
                await self._connection.rollback()
            raise
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        if self._connection:
            await self._connection.close()
            self._connection = None
            self._initialized = False
    
    async def get_user(self, user_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
        async with self.acquire() as conn:
            cursor = await conn.execute('SELECT * FROM users WHERE id = ?', (user_id,))
            row = await cursor.fetchone()
            
            if row:
                return {
                    'id': row['id'],
                    'username': row['username'],
                    'name': row['name'],
                    'join_date': datetime.fromisoformat(row['join_date']) if row['join_date'] else datetime.now(),
                    'last_active': datetime.fromisoformat(row['last_active']) if row['last_active'] else datetime.now(),
                    'current_model': row['current_model'],
                    'context': json.loads(row['context']) if row['context'] else [],
                    'source': row['source']
                }
            return None
    
    async def save_user(self, user_data: Dict[str, Any]) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with self.acquire() as conn:
            await conn.execute('''
                INSERT OR REPLACE INTO users (id, username, name, join_date, last_active, current_model, context, source, auto_message)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                user_data['id'],
                user_data['username'],
                user_data['name'],
                user_data['join_date'].isoformat(),
                user_data['last_active'].isoformat(),
                user_data['current_model'],
                json.dumps(user_data['context'], ensure_ascii=False),
                user_data.get('source', ''),
                user_data.get('auto_message', False)
            ))
    
    async def toggle_auto_message(self, user_id: int) -> bool:
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with self.acquire() as conn:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            cursor = await conn.execute('SELECT auto_message FROM users WHERE id = ?', (user_id,))
            row = await cursor.fetchone()
            current_value = bool(row['auto_message']) if row else False
            
            # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            new_value = not current_value
            await conn.execute('UPDATE users SET auto_message = ? WHERE id = ?', (new_value, user_id))
            return new_value

    async def get_users_for_auto_message(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—ã–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã –±–æ–ª–µ–µ —Å—É—Ç–æ–∫"""
        async with self.acquire() as conn:
            cursor = await conn.execute('''
                SELECT * FROM users 
                WHERE auto_message = 1 
                AND datetime(last_active) <= datetime('now', '-1 day')
                AND (bot_blocked IS NULL OR bot_blocked = 0)
            ''')
            users = []
            async for row in cursor:
                users.append({
                    'id': row['id'],
                    'username': row['username'],
                    'name': row['name'],
                    'current_model': row['current_model'],
                    'context': json.loads(row['context']) if row['context'] else [],
                })
            return users
    
    async def mark_user_blocked(self, user_id: int) -> None:
        """–û—Ç–º–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–≤—à–µ–≥–æ –±–æ—Ç–∞"""
        async with self.acquire() as conn:
            await conn.execute('UPDATE users SET bot_blocked = 1 WHERE id = ?', (user_id,))
    
    async def mark_user_unblocked(self, user_id: int) -> None:
        """–û—Ç–º–µ—á–∞–µ—Ç —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞"""
        async with self.acquire() as conn:
            await conn.execute('UPDATE users SET bot_blocked = 0 WHERE id = ?', (user_id,))

    async def get_stats(self) -> Tuple[int, int, List[Tuple[str, int]]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        async with self.acquire() as conn:
            cursor = await conn.execute('SELECT COUNT(*) as count FROM users')
            total_users = (await cursor.fetchone())['count']
            
            cursor = await conn.execute('SELECT COUNT(*) as count FROM users WHERE date(last_active) = date("now")')
            active_today = (await cursor.fetchone())['count']
            
            cursor = await conn.execute('SELECT current_model, COUNT(*) as count FROM users GROUP BY current_model')
            model_stats = []
            async for row in cursor:
                model_stats.append((row['current_model'], row['count']))
            
            return total_users, active_today, model_stats
    
    async def get_today_message_stats(self) -> Tuple[int, Dict[str, int]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –ø–æ –º–æ–¥–µ–ª—è–º"""
        async with self.acquire() as conn:
            cursor = await conn.execute("""
                SELECT model, COUNT(*) as cnt
                FROM messages
                WHERE role='user' AND date(ts)=date('now')
                GROUP BY model
            """)
            total = 0
            model_counts: Dict[str,int] = {}
            async for row in cursor:
                model_counts[row['model']] = row['cnt']
                total += row['cnt']
            return total, model_counts

    async def get_new_users_stats(self) -> Tuple[int, int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –Ω–µ–¥–µ–ª—é"""
        async with self.acquire() as conn:
            cursor = await conn.execute("""
                SELECT COUNT(*) as count 
                FROM users 
                WHERE date(join_date) = date('now')
            """)
            new_today = (await cursor.fetchone())['count']
            
            cursor = await conn.execute("""
                SELECT COUNT(*) as count 
                FROM users 
                WHERE date(join_date) >= date('now', '-7 days')
            """)
            new_week = (await cursor.fetchone())['count']
            
            return new_today, new_week

    async def get_all_user_ids(self) -> List[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        async with self.acquire() as conn:
            cursor = await conn.execute('SELECT id FROM users')
            return [row['id'] async for row in cursor]

class UserManager:
    def __init__(self, db):
        self.db = db
    
    def create_user(self, user_id, username, name, source=""):
        return {
            'id': user_id,
            'username': username or '',
            'name': name or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            'join_date': datetime.now(),
            'last_active': datetime.now(),
            'current_model': '–ü–æ–¥—Ä—É–≥–∞',
            'context': [],
            'source': source,
            'auto_message': True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏—è
        }
    
    def add_to_context(self, user_data, role, content):
# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–∏—à–µ–º –≤ messages
        try:
            asyncio.create_task(db.add_message(user_data['id'], user_data['current_model'], role, content))
        except RuntimeError:
            pass
        user_data['context'].append({
            'role': role,
            'content': content,
            'timestamp': datetime.now().isoformat()
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        if len(user_data['context']) > MAX_CONTEXT_MESSAGES:
            user_data['context'] = user_data['context'][-MAX_CONTEXT_MESSAGES:]
    
    def clear_context(self, user_data):
        user_data['context'] = []
    
    def update_activity(self, user_data):
        user_data['last_active'] = datetime.now()

class AIService:
    @staticmethod
    async def call_openai_api(messages, model="gpt-4o-mini"):
        url = "https://api.openai.com/v1/chat/completions"
        headers = {
            "Authorization": f"Bearer {OPENAI_API_KEY}",
            "Content-Type": "application/json"
        }
        
        data = {
            "model": model,
            "messages": messages,
            "max_tokens": 1024,
            "temperature": 0.7,
            "stream": True
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=headers, json=data) as response:
                if response.status != 200:
                    raise Exception(f"OpenAI API error: {response.status}")
                
                content = ""
                async for line in response.content:
                    if line.startswith(b'data: '):
                        json_line = line[6:].strip()
                        if json_line == b'[DONE]':
                            break
                        try:
                            chunk = json.loads(json_line)
                            if 'content' in chunk['choices'][0]['delta']:
                                content += chunk['choices'][0]['delta']['content']
                        except (json.JSONDecodeError, KeyError, IndexError) as e:
                            logger.warning(f"Skipping malformed API chunk: {e}")
                            continue
                return content
    
    @staticmethod
    async def call_groq_api(messages, model="llama-3.3-70b-versatile"):
        url = "https://api.groq.com/openai/v1/chat/completions"
        headers = {
            "Authorization": f"Bearer {GROQ_API_KEY}",
            "Content-Type": "application/json"
        }
        
        data = {
            "model": model,
            "messages": messages,
            "max_tokens": 1024,
            "temperature": 0.9,
            "stream": True
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=headers, json=data) as response:
                if response.status != 200:
                    raise Exception(f"Groq API error: {response.status}")
                
                content = ""
                async for line in response.content:
                    if line.startswith(b'data: '):
                        json_line = line[6:].strip()
                        if json_line == b'[DONE]':
                            break
                        try:
                            chunk = json.loads(json_line)
                            if 'content' in chunk['choices'][0]['delta']:
                                content += chunk['choices'][0]['delta']['content']
                        except (json.JSONDecodeError, KeyError, IndexError) as e:
                            logger.warning(f"Skipping malformed API chunk: {e}")
                            continue
                return content

async def check_daily_message_limit(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    has_subscription = await db.has_active_subscription(user_id)
    if has_subscription:
        return True  # –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    daily_count = await db.get_daily_message_count(user_id)
    return daily_count < DAILY_MESSAGE_LIMIT

async def check_monthly_image_limit(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –º–µ—Å—è—Ü"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    has_subscription = await db.has_active_subscription(user_id)
    if not has_subscription:
        return False  # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –º–æ–≥—É—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    monthly_count = await db.get_monthly_image_count(user_id)
    return monthly_count < MONTHLY_IMAGE_LIMIT

async def require_subscription(message: types.Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    has_sub = await db.has_active_subscription(message.from_user.id)
    if not has_sub:
        await message.answer(
            "üí∏ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ.\n\n"
            "üöÄ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–∞—ë—Ç –≤–∞–º:\n"
            "‚Ä¢ üéÜ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            "‚Ä¢ üî• 150 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π 18+ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –º–µ—Å—è—Ü\n\n"
            "–ù–∞–∂–º–∏—Ç–µ /buy —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ 200 ‚≠ê"
        )
    return has_sub

class ImageGenerator:
    @staticmethod
    async def generate_with_cloudflare(prompt):
        headers = {
            "Authorization": f"Bearer {CLOUDFLARE_API_KEY}",
            "Content-Type": "application/json"
        }
        data = {
            "prompt": prompt,
            "num_steps": 40,
            "guidance_scale": 7.5,
        }
        async with aiohttp.ClientSession() as session:
            url = f"{CLOUDFLARE_API_URL}@cf/black-forest-labs/flux-1-schnell"
            try:
                async with session.post(url, headers=headers, json=data) as response:
                    try:
                        async with asyncio.timeout(30.0):
                            if response.status == 200:
                                result = await response.json()
                                image_base64 = result.get("result", {}).get("image")
                                if image_base64:
                                    return base64.b64decode(image_base64)
                    except asyncio.TimeoutError:
                        logger.error("Cloudflare image generation timed out after 30 seconds")
            except Exception as e:
                logger.error(f"Cloudflare image generation timeout/error: {e}")
        return None
    
    @staticmethod
    async def generate_with_runware(prompt):
        try:
            runware = Runware(api_key=RUNWARE_API_KEY)
            await asyncio.wait_for(runware.connect(), timeout=10.0)
            request_image = IImageInference(
                positivePrompt=f"{IMAGE_PREFIX}, {prompt}",
                model="urn:air:flux1:checkpoint:civitai:618692@691639",
                lora=[
                    ILora(
                        model="urn:air:flux1:lora:civitai:667086@746602",
                        weight=0.8
                    )
                ],
                numberResults=1,
                negativePrompt=NEGATIVE_PROMPT,
                height=1024,
                width=1024,
                steps=20
            )
            images = await asyncio.wait_for(runware.imageInference(requestImage=request_image), timeout=30.0)
            if images and images[0]:
                image = images[0]
                if image.imageURL:
                    return image.imageURL
                elif image.imageBase64:
                    return base64.b64decode(image.imageBase64)
        except Exception as e:
            logger.error(f"Runware error: {e}")
        return None

class KeyboardManager:
    @staticmethod
    def create_quick_replies(model_name, user_data=None):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±—ã—Å—Ç—Ä—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏ –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
        keyboard = []
        
        if model_name == "–õ—é–±–æ–≤–Ω–∏—Ü–∞":
            keyboard = [
                [KeyboardButton(text="üíã –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–∏—Ö –∂–µ–ª–∞–Ω–∏—è—Ö"), KeyboardButton(text="üí¶ –û–ø–∏—à–∏ —Å–µ–±—è")],
                [KeyboardButton(text="üî• –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–µ —Ñ–æ—Ç–æ"), KeyboardButton(text="üòà –î–∞–≤–∞–π –ø–æ–∏–≥—Ä–∞–µ–º")],
                [KeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥"), KeyboardButton(text="üîÑ –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å")]
            ]
        elif model_name == "–ü–æ—Ä–Ω–æ–∞–∫—Ç—Ä–∏—Å–∞":
            keyboard = [
                [KeyboardButton(text="üçÜ –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å—ä—ë–º–∫–∞—Ö"), KeyboardButton(text="üí¶ –¢–≤–æ–∏ —Ñ–∞–Ω—Ç–∞–∑–∏–∏")],
                [KeyboardButton(text="üî• –ü–æ–∫–∞–∂–∏ –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ"), KeyboardButton(text="üçë –ö–∞–∫ —Å–Ω–∏–º–∞–ª—Å—è –ø–æ—Ä–Ω–æ—Ñ–∏–ª—å–º")],
                [KeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥"), KeyboardButton(text="üîÑ –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å")]
            ]
        elif model_name == "–ê—Å—Ç—Ä–æ–ª–æ–≥":
            keyboard = [
                [KeyboardButton(text="üåô –ú–Ω–µ –Ω—É–∂–µ–Ω —Å–æ–≤–µ—Ç"), KeyboardButton(text="üòî –£ –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º–∞")],
                [KeyboardButton(text="üîÆ –ü–æ–º–æ–≥–∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è"), KeyboardButton(text="üå± –ö–∞–∫ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ")],
                [KeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥"), KeyboardButton(text="üîÑ –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å")]
            ]
        elif model_name == "–£—á–µ–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫":
            keyboard = [
                [KeyboardButton(text="üìö –ü–æ–º–æ–≥–∏ —Å –∑–∞–¥–∞—á–µ–π"), KeyboardButton(text="‚úçÔ∏è –ü—Ä–æ–≤–µ—Ä—å —Ä–µ—à–µ–Ω–∏–µ")],
                [KeyboardButton(text="üìù –ü–æ–º–æ–≥–∏ —Å –î–ó"), KeyboardButton(text="üí° –û–±—ä—è—Å–Ω–∏ —Ç–µ–º—É")],
                [KeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥"), KeyboardButton(text="üîÑ –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å")]
            ]
        else:  # –ü–æ–¥—Ä—É–≥–∞ –∏ –æ—Å—Ç–∞–ª—å–Ω—ã–µ
            keyboard = [
                [KeyboardButton(text="üëã –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"), KeyboardButton(text="ü§î –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ")],
                [KeyboardButton(text="üòä –ß—Ç–æ –Ω–æ–≤–æ–≥–æ?"), KeyboardButton(text="üòÑ –•–æ—á—É –ø–æ–æ–±—â–∞—Ç—å—Å—è")],
                [KeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥"), KeyboardButton(text="üîÑ –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å")]
            ]
        
        return ReplyKeyboardMarkup(
            keyboard=keyboard,
            resize_keyboard=True,
            persistent=True
        )
    
    @staticmethod
    def create_model_selection(user_data=None):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏"""
        builder = InlineKeyboardBuilder()
        
        # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏
        builder.add(InlineKeyboardButton(text="üíã –õ—é–±–æ–≤–Ω–∏—Ü–∞", callback_data="model_1"))
        builder.add(InlineKeyboardButton(text="üíû –ü–æ–¥—Ä—É–≥–∞", callback_data="model_2"))
        builder.add(InlineKeyboardButton(text="üß† –ê—Å—Ç—Ä–æ–ª–æ–≥", callback_data="model_3"))
        builder.add(InlineKeyboardButton(text="üìö –£—á–µ–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫", callback_data="model_4"))
        builder.add(InlineKeyboardButton(text="üçë –ü–æ—Ä–Ω–æ–∞–∫—Ç—Ä–∏—Å–∞", callback_data="model_5"))
        
        # –ü—Ä–µ–º–∏—É–º –º–æ–¥–µ–ª–∏ (—Å –ø–æ–º–µ—Ç–∫–æ–π üëë)
        builder.add(InlineKeyboardButton(text="üëë üîó BDSM –ì–æ—Å–ø–æ–∂–∞", callback_data="model_6"))
        builder.add(InlineKeyboardButton(text="üëë üç∑ –ú–ò–õ–§", callback_data="model_7"))
        builder.add(InlineKeyboardButton(text="üëë üå∏ –ê–Ω–∏–º–µ-—Ç—è–Ω", callback_data="model_8"))
        builder.add(InlineKeyboardButton(text="üëë üíº –°–µ–∫—Ä–µ—Ç–∞—Ä—à–∞", callback_data="model_9"))
        builder.add(InlineKeyboardButton(text="üëë üíâ –ú–µ–¥—Å–µ—Å—Ç—Ä–∞", callback_data="model_10"))
        builder.add(InlineKeyboardButton(text="üëë üíÉ –°—Ç—Ä–∏–ø—Ç–∏–∑–µ—Ä—à–∞", callback_data="model_11"))
        builder.add(InlineKeyboardButton(text="üëë üí™ –§–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä", callback_data="model_12"))
        builder.add(InlineKeyboardButton(text="üëë üíÜ‚Äç‚ôÄÔ∏è –ú–∞—Å—Å–∞–∂–∏—Å—Ç–∫–∞", callback_data="model_13"))
        builder.add(InlineKeyboardButton(text="üëë üè† –°–æ—Å–µ–¥–∫–∞", callback_data="model_14"))
        builder.add(InlineKeyboardButton(text="üëë ‚úàÔ∏è –°—Ç—é–∞—Ä–¥–µ—Å—Å–∞", callback_data="model_15"))
        builder.add(InlineKeyboardButton(text="üëë üß† –ü—Å–∏—Ö–æ–ª–æ–≥", callback_data="model_16"))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–π
        auto_message_enabled = user_data and user_data.get('auto_message', False)
        button_text = "‚ùå –ê–Ω–æ—Ä–∞ –Ω–µ –ø–∏—à–µ—Ç –ø–µ—Ä–≤–æ–π" if auto_message_enabled else "‚úÖ –ê–Ω–æ—Ä–∞ –ø–∏—à–µ—Ç –ø–µ—Ä–≤–æ–π"
        builder.add(InlineKeyboardButton(text=button_text, callback_data="toggle_auto_message"))
        
        builder.adjust(1)
        return builder.as_markup()
    
    @staticmethod
    def create_dynamic_keyboard(actions):
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏"""
        keyboard = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π (–º–∞–∫—Å–∏–º—É–º 2)
        if len(actions) >= 2:
            keyboard.append([
                KeyboardButton(text=actions[0]),
                KeyboardButton(text=actions[1])
            ])
        elif len(actions) == 1:
            keyboard.append([KeyboardButton(text=actions[0])])
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard.append([
            KeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥"),
            KeyboardButton(text="üîÑ –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å")
        ])
        
        return ReplyKeyboardMarkup(
            keyboard=keyboard,
            resize_keyboard=True,
            persistent=True
        )

class MessageProcessor:
    def __init__(self, user_manager, ai_service, image_generator):
        self.user_manager = user_manager
        self.ai_service = ai_service
        self.image_generator = image_generator
        # –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_actions = {}
    
    def extract_actions(self, text):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞"""
        actions = []
        
        # –ò—â–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç [–¥–µ–π—Å—Ç–≤–∏—è: ]
        matches = re.findall(r'\[–¥–µ–π—Å—Ç–≤–∏—è:(.*?)\]', text, re.DOTALL | re.IGNORECASE)
        
        if not matches:
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
            alt_matches = re.findall(r'(?:^|\n|\r)(?:–í–∞—Ä–∏–∞–Ω—Ç—ã\s*)?[–î–¥]–µ–π—Å—Ç–≤–∏—è?:?\s*(.*?)(?:\n|$)', text, re.MULTILINE)
            if alt_matches:
                matches = alt_matches
        
        if matches:
            actions_text = matches[-1].strip()
            raw_actions = [action.strip() for action in actions_text.split(',')]
            
            cleaned_actions = []
            for action in raw_actions:
                cleaned_action = re.sub(
                    r'^(–ø–µ—Ä–≤—ã–π|–≤—Ç–æ—Ä–æ–π|—Ç—Ä–µ—Ç–∏–π|–æ–¥–∏–Ω|–¥–≤–∞|—Ç—Ä–∏)?\s*(–≤–∞—Ä–∏–∞–Ω—Ç|–¥–µ–π—Å—Ç–≤–∏–µ)?\s*(–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏[–µ—è–π]|–¥–∏–∞–ª–æ–≥–∞)?(:|\.|\s)*', 
                    '', 
                    action, 
                    flags=re.IGNORECASE
                ).strip()
                
                if cleaned_action:
                    cleaned_actions.append(cleaned_action)
            
            actions = cleaned_actions[:2]
            
            # –£–¥–∞–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –∏–∑ —Ç–µ–∫—Å—Ç–∞
            text = re.sub(r'\[–¥–µ–π—Å—Ç–≤–∏—è:.*?\]', '', text, flags=re.DOTALL | re.IGNORECASE).strip()
            text = re.sub(r'(?:^|\n|\r)(?:–í–∞—Ä–∏–∞–Ω—Ç—ã\s*)?[–î–¥]–µ–π—Å—Ç–≤–∏—è?:?\s*.*?(?:\n|$)', '', text, flags=re.MULTILINE).strip()
        
        return text, actions
    
    async def process_message(self, user_data, message_text):
        response = None
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏
            model_info = MODELS[user_data['current_model']]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
            system_prompt = custom_prompts.get(
                user_data['current_model'], 
                model_info["prompt"]
            ).format(name=user_data['name'])
            
            messages = [{"role": "system", "content": system_prompt}]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            for msg in user_data.get('context', []):
                messages.append({
                    "role": msg.get('role', 'user'),
                    "content": msg.get('content', '')
                })
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            messages.append({"role": "user", "content": str(message_text)})
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            self.user_manager.add_to_context(user_data, "user", str(message_text))
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è API-–∑–∞–ø—Ä–æ—Å–∞ (30 —Å–µ–∫—É–Ω–¥)
            try:
                if model_info.get('api') == 'groq':
                    response = await asyncio.wait_for(
                        self.ai_service.call_groq_api(messages, model_info['model']),
                        timeout=30.0
                    )
                else:
                    response = await asyncio.wait_for(
                        self.ai_service.call_openai_api(messages, model_info['model']),
                        timeout=30.0
                    )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                if response:
                    self.user_manager.add_to_context(user_data, "assistant", response)
                
                return response
                
            except asyncio.TimeoutError as e:
                error_msg = f"API request timed out for user {user_data.get('id')}"
                logger.error(error_msg)
                await error_monitor.log_critical_error(
                    "API_TIMEOUT", 
                    f"API timeout for model {model_info.get('model', 'unknown')}", 
                    user_data.get('id')
                )
                raise Exception("–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.") from e
                
            except Exception as api_error:
                error_msg = f"API request failed for user {user_data.get('id')}: {str(api_error)}"
                logger.error(error_msg, exc_info=True)
                await error_monitor.log_critical_error(
                    "API_ERROR", 
                    f"API error for model {model_info.get('model', 'unknown')}: {str(api_error)}", 
                    user_data.get('id')
                )
                raise Exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.") from api_error
                
        except KeyError as e:
            error_msg = f"Missing required key in user data or model info: {str(e)}"
            logger.error(error_msg)
            raise Exception("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.") from e
            
        except Exception as e:
            error_msg = f"Unexpected error in process_message for user {user_data.get('id')}: {str(e)}"
            logger.error(error_msg, exc_info=True)
            raise Exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.") from e
    
    async def handle_lovistnica_response(self, message, response_text):
        user_id = message.from_user.id
        user_data = await db.get_user(user_id)
        clean_text, actions = self.extract_actions(response_text)
        if actions:
            self.user_actions[user_id] = actions
        image_prompts = re.findall(r'\[image:\s*(.*?)\]', clean_text, re.IGNORECASE)
        keyboard = KeyboardManager.create_dynamic_keyboard(actions) if actions else KeyboardManager.create_quick_replies("–õ—é–±–æ–≤–Ω–∏—Ü–∞", user_data)
        if image_prompts:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            if not await check_monthly_image_limit(user_id):
                monthly_count = await db.get_monthly_image_count(user_id)
                await message.answer(
                    f"üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!\n\n"
                    f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {monthly_count}/{MONTHLY_IMAGE_LIMIT}\n\n"
                    f"üíé –ü–æ–¥–ø–∏—Å–∫–∞ –¥–∞–µ—Ç 150 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π 18+ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –º–µ—Å—è—Ü + –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
                    f"–ù–∞–∂–º–∏—Ç–µ /buy —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ 200 ‚≠ê",
                    reply_markup=keyboard
                )
                return
            
            await bot.send_chat_action(message.chat.id, ChatAction.UPLOAD_PHOTO)
            clean_text = re.sub(r'\[image:.*?\]', '', clean_text).strip()
            if clean_text:
                try:
                    await message.answer(clean_text, parse_mode="Markdown", reply_markup=keyboard)
                except Exception as e:
                    # –ï—Å–ª–∏ Markdown –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    logger.warning(f"Markdown parsing failed in lovistnica: {e}, sending as plain text")
                    await message.answer(clean_text, reply_markup=keyboard)
            else:
                # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–¥–µ–ª—å–Ω–æ
                await message.answer(" ", reply_markup=keyboard)
            await message.answer("üì∏ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
            image_data = await self.image_generator.generate_with_runware(image_prompts[0])
            
            if image_data:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
                await db.increment_monthly_image_count(user_id)
                if isinstance(image_data, str):
                    await message.answer_photo(image_data, caption="üíã –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ –¥–ª—è —Ç–µ–±—è")
                else:
                    await message.answer_photo(
                        BufferedInputFile(image_data, "image.jpg"),
                        caption="üíã –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ –¥–ª—è —Ç–µ–±—è"
                    )
            else:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        else:
            try:
                await message.answer(clean_text, parse_mode="Markdown", reply_markup=keyboard)
            except Exception as e:
                # –ï—Å–ª–∏ Markdown –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                logger.warning(f"Markdown parsing failed in lovistnica final: {e}, sending as plain text")
                await message.answer(clean_text, reply_markup=keyboard)
    
    async def handle_regular_response(self, message, response_text, model_name):
        user_id = message.from_user.id
        user_data = await db.get_user(user_id)
        clean_text, actions = self.extract_actions(response_text)
        if actions:
            self.user_actions[user_id] = actions
        image_prompts = re.findall(r'\[IMAGE_PROMPT\]\s*(.*?)\|(.*?)(?=\[IMAGE_PROMPT\]|$)', clean_text, re.DOTALL)
        keyboard = KeyboardManager.create_dynamic_keyboard(actions) if actions else KeyboardManager.create_quick_replies(model_name, user_data)
        if image_prompts:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            if not await check_monthly_image_limit(user_id):
                monthly_count = await db.get_monthly_image_count(user_id)
                await message.answer(
                    f"üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!\n\n"
                    f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {monthly_count}/{MONTHLY_IMAGE_LIMIT}\n\n"
                    f"üíé –ü–æ–¥–ø–∏—Å–∫–∞ –¥–∞–µ—Ç 150 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –º–µ—Å—è—Ü + –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
                    f"–ù–∞–∂–º–∏—Ç–µ /buy —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ 200 ‚≠ê",
                    reply_markup=keyboard
                )
                return
            
            await bot.send_chat_action(message.chat.id, ChatAction.UPLOAD_PHOTO)
            clean_text = re.sub(r'\[IMAGE_PROMPT\].*?\|', '', clean_text, flags=re.DOTALL).strip()
            if clean_text:
                try:
                    await message.answer(clean_text, parse_mode="Markdown", reply_markup=keyboard)
                except Exception as e:
                    # –ï—Å–ª–∏ Markdown –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    logger.warning(f"Markdown parsing failed in regular: {e}, sending as plain text")
                    await message.answer(clean_text, reply_markup=keyboard)
            else:
                await message.answer(" ", reply_markup=keyboard)
            for image_prompt, caption in image_prompts:
                # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                if not validate_input_length(image_prompt.strip(), MAX_PROMPT_LENGTH, "image prompt"):
                    await message.answer(
                        "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –µ–≥–æ –¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤.",
                        reply_markup=keyboard
                    )
                    continue
                    
                await message.answer("üì∏ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
                image_data = await self.image_generator.generate_with_cloudflare(image_prompt.strip())
                if image_data:
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
                    await db.increment_monthly_image_count(user_id)
                    await message.answer_photo(
                        BufferedInputFile(image_data, "image.jpg"),
                        caption=caption.strip()
                    )
                else:
                    await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        else:
            try:
                await message.answer(clean_text, parse_mode="Markdown", reply_markup=keyboard)
            except Exception as e:
                # –ï—Å–ª–∏ Markdown –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                logger.warning(f"Markdown parsing failed in regular final: {e}, sending as plain text")
                await message.answer(clean_text, reply_markup=keyboard)

# ---- –ü–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ ----
SUBSCRIPTION_PRICE_STARS = 200  # 200 Stars
SUBSCRIPTION_DESCRIPTION = "–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è + 150 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π 18+ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"
DAILY_MESSAGE_LIMIT = 20  # –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
MONTHLY_IMAGE_LIMIT = 150  # –õ–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
db = Database(DB_PATH)
user_manager = UserManager(db)
ai_service = AIService()
image_generator = ImageGenerator()
message_processor = MessageProcessor(user_manager, ai_service, image_generator)

# ---- –§—É–Ω–∫—Ü–∏–∏ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≥—Ä–µ–≤–∞ ----

# A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω
SUBSCRIPTION_PRICES = {
    'test_a': 150,  # –æ—Å–Ω–æ–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞
    'test_b': 99,   # —Å–Ω–∏–∂–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞
}

def get_user_price_group(user_id: int) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–µ–Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É –¥–ª—è A/B —Ç–µ—Å—Ç–∞"""
    return ['test_a', 'test_b'][user_id % 2]

async def send_teaser_message(user_id: int, teaser_type: str = "photo"):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–∏–∑–µ—Ä –ø—Ä–µ–º–∏—É–º-–∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(
            text="üíé –ü–æ–ª—É—á–∏—Ç—å Premium –¥–æ—Å—Ç—É–ø",
            callback_data="buy_premium_teaser"
        ))
        
        if teaser_type == "photo":
            await bot.send_message(
                user_id,
                "üî• –ê–Ω–æ—Ä–∞ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–¥–µ–ª–∞–ª–∞ –Ω–æ–≤–æ–µ –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è...\n\n"
                "üíã *–®–µ–ø—á–µ—Ç –Ω–∞ —É—à–∫–æ:* –•–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å, —á—Ç–æ —è –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∞?\n\n"
                "üíé –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å Premium –ø–æ–¥–ø–∏—Å–∫–æ–π",
                parse_mode="Markdown",
                reply_markup=builder.as_markup()
            )
        elif teaser_type == "voice":
            await bot.send_message(
                user_id,
                "üé§ –ê–Ω–æ—Ä–∞ –∑–∞–ø–∏—Å–∞–ª–∞ –¥–ª—è —Ç–µ–±—è –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...\n\n"
                "üòà –¢–∞–º –æ–Ω–∞ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç –æ —Å–≤–æ–∏—Ö —Å–∞–º—ã—Ö –∏–Ω—Ç–∏–º–Ω—ã—Ö —Ñ–∞–Ω—Ç–∞–∑–∏—è—Ö\n\n"
                "üíé –†–∞–∑–±–ª–æ–∫–∏—Ä—É–π —Å Premium –ø–æ–¥–ø–∏—Å–∫–æ–π",
                parse_mode="Markdown",
                reply_markup=builder.as_markup()
            )
        elif teaser_type == "exclusive":
            await bot.send_message(
                user_id,
                "üåü *–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞!*\n\n"
                "üîû BDSM-–≥–æ—Å–ø–æ–∂–∞ –ê–Ω–æ—Ä–∞ –∂–¥–µ—Ç —Ç–µ–±—è...\n"
                "–û–Ω–∞ –∑–Ω–∞–µ—Ç, —á–µ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ üòè\n\n"
                "üíé –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
                parse_mode="Markdown",
                reply_markup=builder.as_markup()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–∏–∑–µ—Ä–∞: {e}")

async def track_conversion_event(user_id: int, event: str, details: dict = None):
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    try:
        async with db.acquire() as conn:
            await conn.execute('''
                CREATE TABLE IF NOT EXISTS conversion_events (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    event TEXT,
                    details TEXT,
                    timestamp TEXT,
                    FOREIGN KEY(user_id) REFERENCES users(id)
                )
            ''')
            
            await conn.execute(
                'INSERT INTO conversion_events (user_id, event, details, timestamp) VALUES (?, ?, ?, ?)',
                (user_id, event, json.dumps(details or {}, ensure_ascii=False), datetime.now().isoformat())
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            if event in ['limit_reached', 'payment_screen_shown', 'payment_completed']:
                logger.info(f"[CONVERSION] User {user_id}: {event} - {details}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: {e}")

async def get_conversion_funnel(user_id: int) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤–æ—Ä–æ–Ω–∫—É –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        async with db.acquire() as conn:
            cursor = await conn.execute('''
                SELECT event, timestamp FROM conversion_events 
                WHERE user_id = ? 
                ORDER BY timestamp
            ''', (user_id,))
            
            events = []
            async for row in cursor:
                events.append({
                    'event': row['event'],
                    'timestamp': row['timestamp']
                })
            
            return {
                'user_id': user_id,
                'events': events,
                'converted': any(e['event'] == 'payment_completed' for e in events)
            }
    except Exception:
        return {'user_id': user_id, 'events': [], 'converted': False}

async def schedule_promo_messages(user_id: int):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–æ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞"""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–∑–µ—Ä —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await asyncio.sleep(1800)  # 30 –º–∏–Ω—É—Ç
        await send_teaser_message(user_id, "photo")
        
        # –í—Ç–æ—Ä–æ–π —Ç–∏–∑–µ—Ä —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞
        await asyncio.sleep(5400)  # 1.5 —á–∞—Å–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ
        await send_teaser_message(user_id, "voice")
        
        # –¢—Ä–µ—Ç–∏–π —Ç–∏–∑–µ—Ä –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
        await asyncio.sleep(79200)  # 22 —á–∞—Å–∞ –ø–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–≥–æ
        await send_teaser_message(user_id, "exclusive")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ schedule_promo: {e}")

# –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ (–º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –≤ config.py –∫–∞–∫ REQUIRED_CHANNELS)
_DEFAULT_REQUIRED_CHANNELS: Dict[str, str] = {
    "-1002286305253": "üîû ANORA"
}

REQUIRED_CHANNELS: Dict[str, str] = globals().get("REQUIRED_CHANNELS", _DEFAULT_REQUIRED_CHANNELS)

# Links –∫ –∫–∞–Ω–∞–ª–∞–º. –ú–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å —è–≤–Ω–æ –≤ config.py –∫–∞–∫ REQUIRED_CHANNELS_LINKS = {id: url}
REQUIRED_CHANNELS_LINKS: Dict[str, str] = globals().get("REQUIRED_CHANNELS_LINKS", {})

# –ö—ç—à –¥–ª—è —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö username -> url
_CHANNEL_URL_CACHE: Dict[str, str] = {}

async def get_channel_url(chat_id: str) -> str:
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —è–≤–Ω–æ –∑–∞–¥–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞
    if chat_id in REQUIRED_CHANNELS_LINKS:
        return REQUIRED_CHANNELS_LINKS[chat_id]
    if chat_id in _CHANNEL_URL_CACHE:
        return _CHANNEL_URL_CACHE[chat_id]
    try:
        chat = await bot.get_chat(chat_id)
        if chat.username:
            url = f"https://t.me/{chat.username}"
        else:
            # –ï—Å–ª–∏ username –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç tg://resolve?domain
            url = f"https://t.me/resolve?domain={chat_id.lstrip('-100')}"
    except Exception:
        url = f"https://t.me/resolve?domain={chat_id.lstrip('-100')}"
    _CHANNEL_URL_CACHE[chat_id] = url
    return url

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
async def log_diagnostics(polling_task, stop_event):
    while not stop_event.is_set():
        try:
            logger.info("[DIAG] --- –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è ---")
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –≤ event loop
            all_tasks = list(asyncio.all_tasks())
            logger.info(f"[DIAG] –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {len(all_tasks)}")
            # polling_task —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            logger.info(f"[DIAG] polling_task: {polling_task}, done={polling_task.done() if polling_task else None}")
            # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–ø–¥–µ–π—Ç–∞
            async with last_update_lock:
                since = time.time() - last_update_time
            logger.info(f"[DIAG] –° –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–ø–¥–µ–π—Ç–∞: {since:.0f} —Å–µ–∫")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –¥–æ–ª–≥–æ –Ω–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –µ—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–µ—Ç –∞–ø–¥–µ–π—Ç–æ–≤ –æ—á–µ–Ω—å –¥–æ–ª–≥–æ (6 —á–∞—Å–æ–≤) ‚Äî —ç—Ç–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ.
            if since > 21600:  # 6 —á–∞—Å–æ–≤
                logger.critical(f"[DIAG] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –¥–æ–ª–≥–æ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∞–ø–¥–µ–π—Ç–æ–≤: {since:.0f} —Å–µ–∫, –∏–Ω–∏—Ü–∏–∏—Ä—É—é –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫")
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è shutdown, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é
                asyncio.create_task(shutdown(42))
                return
                
            # –û—Ç–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã/—Å–æ–∫–µ—Ç—ã
            if psutil:
                proc = psutil.Process(os.getpid())
                num_fds = proc.num_fds() if hasattr(proc, 'num_fds') else 'n/a'
                open_files = proc.open_files()
                connections = proc.connections()
                logger.info(f"[DIAG] –û—Ç–∫—Ä—ã—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤: {num_fds}, —Å–æ–∫–µ—Ç–æ–≤: {len(connections)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
                if len(connections) > 200:
                    logger.critical(f"[DIAG] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {len(connections)}, –∏–Ω–∏—Ü–∏–∏—Ä—É—é –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫")
                    asyncio.create_task(shutdown(42))
                    return
            else:
                logger.info("[DIAG] psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ —Å–æ–∫–µ—Ç–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                
            # RAM/CPU
            if psutil:
                mem = psutil.virtual_memory()
                cpu = psutil.cpu_percent(interval=0.1)
                logger.info(f"[DIAG] RAM: {mem.percent}%, CPU: {cpu}%")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
                if mem.percent > 90:
                    logger.critical(f"[DIAG] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM: {mem.percent}%, –∏–Ω–∏—Ü–∏–∏—Ä—É—é –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫")
                    asyncio.create_task(shutdown(42))
                    return
        except Exception as e:
            logger.error(f"[DIAG] –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç

# –ö–æ–º–∞–Ω–¥—ã
# ------------------------
# WebApp payment handlers
# ------------------------

@dp.message(lambda m: getattr(m, 'web_app_data', None) is not None)
async def handle_web_app_data(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö, –ø–æ—Å—Ç—É–ø–∞—é—â–∏—Ö –∏–∑ Telegram WebApp.
    –õ–æ–≥–∏—Ä—É–µ–º –≤—Å—ë —Å—ã—Ä—å—ë, —á—Ç–æ–±—ã –ø—Ä–æ—â–µ –±—ã–ª–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.
    """
    await update_last_update_time()
    logger.info("[WEBAPP] Received WebApp data from user %s", message.from_user.id)

    # –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏—à–ª–æ –∏–∑ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    try:
        raw_data = message.web_app_data.data
    except AttributeError:
        logger.warning("[WEBAPP] message.web_app_data –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç .data ‚Üí %s", message.web_app_data)
        return

    logger.info("[WEBAPP] Raw web_app_data: %s", raw_data)

    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
    try:
        data = json.loads(raw_data)
    except Exception as e:
        logger.error("[WEBAPP] –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON (%s). raw_data=%s", e, raw_data)
        return

    logger.info("[WEBAPP] Parsed data: %s", data)

    action = data.get('action')

    if action == 'request_payment':
        await create_stars_invoice(message, data)
    elif action == 'check_subscription':
        # –ï—Å–ª–∏ WebApp –Ω–µ –ø–µ—Ä–µ–¥–∞–ª user_id, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        user_id = data.get('user_id') or message.from_user.id
        is_active = await db.has_active_subscription(user_id)
        await message.answer(json.dumps({'active': is_active}))
    elif action == 'select_model' or action == 'model_selected':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –∏–∑ WebApp
        model_name = data.get('model')
        user_id = data.get('user_id') or message.from_user.id
        
        if model_name and model_name in MODELS:
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = await db.get_user(user_id)
            if not user_data:
                user_data = user_manager.create_user(user_id, message.from_user.username, message.from_user.full_name)
                await db.save_user(user_data)
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ–ª—å –∏ –æ—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            user_data['current_model'] = model_name
            user_manager.clear_context(user_data)
            await db.save_user(user_data)
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏
            keyboard = KeyboardManager.create_quick_replies(model_name, user_data)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await message.answer(
                f"‚úÖ –ú–æ–¥–µ–ª—å **{model_name}** —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
                f"–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –æ–±—â–µ–Ω–∏–µ!",
                parse_mode="Markdown",
                reply_markup=keyboard
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏
            await send_model_greeting(message, model_name, keyboard)
        else:
            await message.answer("ü§î –•–º, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –≤—ã–±–æ—Ä–æ–º –º–æ–¥–µ–ª–∏! –ü–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /change —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∑–∞–Ω–æ–≤–æ üòä")
    else:
        logger.warning("[WEBAPP] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: %s ¬∑ data=%s", action, data)

async def create_stars_invoice(message: types.Message, data):
    try:
        logger.info("[PAYMENT] Creating invoice for user %s", message.from_user.id)
        
        # A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω
        user_id = message.from_user.id
        price_group = get_user_price_group(user_id)
        price_amount = SUBSCRIPTION_PRICES[price_group]
        
        # –¢—Ä–µ–∫–∏–Ω–≥ —Å–æ–±—ã—Ç–∏—è –ø–æ–∫–∞–∑–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
        await track_conversion_event(user_id, 'payment_screen_shown', {'price': price_amount, 'group': price_group})
        
        prices = [types.LabeledPrice(label="–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞", amount=price_amount)]
        await bot.send_invoice(
            chat_id=message.chat.id,
            title="ANORA Art - –ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø",
            description=SUBSCRIPTION_DESCRIPTION,
            payload="monthly_subscription",
            provider_token="",  # Telegram Stars
            currency="XTR",
            prices=prices,
            start_parameter="subscription"
        )
        logger.info("[PAYMENT] Invoice sent successfully to user %s", user_id)
    except Exception as e:
        logger.error("[PAYMENT] Failed to create invoice: %s", e)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /buy")

@dp.pre_checkout_query()
async def pre_checkout_query_handler(pre_checkout_q: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)

@dp.message(F.successful_payment)
async def successful_payment_handler(message: types.Message):
    user_id = message.from_user.id
    expires_at = datetime.now() + timedelta(days=30)
    await db.save_subscription(user_id, expires_at)
    
    # –¢—Ä–µ–∫–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
    price_group = get_user_price_group(user_id)
    await track_conversion_event(user_id, 'payment_completed', {
        'amount': SUBSCRIPTION_PRICES[price_group],
        'group': price_group,
        'expires_at': expires_at.isoformat()
    })
    
    await message.answer(
        "üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π!</b>\n\n"
        "üíé –£ –≤–∞—Å —Ç–µ–ø–µ—Ä—å –µ—Å—Ç—å ANORA Premium –Ω–∞ 30 –¥–Ω–µ–π!\n\n"
        "üöÄ <b>–í–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>\n"
        "‚Ä¢ üéÜ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "‚Ä¢ üî• 150 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π 18+ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –º–µ—Å—è—Ü\n"
        "‚Ä¢ üåü –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
        f"üó∫ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires_at.strftime('%d.%m.%Y')}\n\n"
        "üî• –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è —Å –ê–Ω–æ—Ä–æ–π!",
        parse_mode="HTML"
    )

# -------------

@dp.message(Command("start"))
async def start_command(message: types.Message, command: CommandObject):
    logger.info(f"[EVENT] –ü–æ–ª—É—á–µ–Ω /start –æ—Ç {message.from_user.id}")
    await update_last_update_time()
    user_id = message.from_user.id
    username = message.from_user.username
    name = message.from_user.full_name
    source_tag = (command.args or '').strip()  # deep-link –ø–∞—Ä–∞–º–µ—Ç—Ä
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç /start - –∑–Ω–∞—á–∏—Ç –æ–Ω –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
    await db.mark_user_unblocked(user_id)
    
    user_data = await db.get_user(user_id)
    if not user_data:
        user_data = user_manager.create_user(user_id, username, name, source_tag)
        await db.save_user(user_data)
        await db.increment_source_user(source_tag)
        
        # –¢—Ä–µ–∫–∏–Ω–≥ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await track_conversion_event(user_id, 'user_registered', {'source': source_tag})
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–µ–≤ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        asyncio.create_task(schedule_promo_messages(user_id))
    elif source_tag:
        if not user_data.get('source'):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data['source'] = source_tag
            await db.save_user(user_data)
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π-–∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
        await db.increment_source_user(source_tag)
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
    if globals().get('USE_FLYER_PARTNER_SYSTEM', False) and flyer_service:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫—É—é —Å–∏—Å—Ç–µ–º—É Flyer
        logger.info(f"[FLYER] –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —á–µ—Ä–µ–∑ Flyer API")
        
        # –í—ã–∑—ã–≤–∞–µ–º check - –µ—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞, Flyer —Å–∞–º –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ
        has_access = await flyer_service.check_user_access(user_id, language="ru")
        logger.info(f"[FLYER] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {'‚úÖ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø' if has_access else '‚ùå –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞'}")
        
        if not has_access:
            # Flyer —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏
            logger.info(f"[FLYER] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
            monitor_task = asyncio.create_task(flyer_service.monitor_user_access(user_id))
            logger.info(f"[FLYER] –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ –∑–∞–¥–∞—á–∞: {monitor_task}")
            return  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à–∏–π –ø–æ—Ç–æ–∫ /start
        else:
            # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            logger.info(f"[FLYER] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ")
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
        async def is_member(chat_id: str, uid: int) -> bool:
            try:
                member = await bot.get_chat_member(chat_id, uid)
                return member.status in ("member", "administrator", "creator")
            except Exception:
                return False

        not_joined = [cid for cid in REQUIRED_CHANNELS if not await is_member(cid, user_id)]

        if not_joined:
            builder = InlineKeyboardBuilder()
            for cid in REQUIRED_CHANNELS:
                title = REQUIRED_CHANNELS[cid]
                url = await get_channel_url(cid)
                builder.add(InlineKeyboardButton(text=f"üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è: {title}", url=url))
            # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
            builder.add(InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_sub"))
            builder.adjust(1)

            await message.answer(
                "‚ù§Ô∏è‚Äçüî• <b>–î–æ—Å—Ç—É–ø –∫ –ê–Ω–æ—Ä–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏!</b>\n\n"
                "–ú—ã —Å–æ–±–∏—Ä–∞–µ–º —É—é—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã ‚Äî —Ç–∞–º –±–æ–Ω—É—Å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, "
                "—ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏ –≥–æ—Ä—è—á–∏–µ –∏–Ω—Å–∞–π–¥—ã. –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ <b>¬´–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è¬ª</b>.\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!",
                parse_mode="HTML",
                reply_markup=builder.as_markup()
            )
            return  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à–∏–π –ø–æ—Ç–æ–∫ /start

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    await send_welcome_message(message.from_user.id)

async def send_welcome_message(user_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    # –§–æ—Ä–º–∏—Ä—É–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –∫–∞—Ç–∞–ª–æ–≥–∞ –∏ –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    user_data = await db.get_user(user_id)
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text="üåê –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –º–æ–¥–µ–ª–µ–π",
        web_app=WebAppInfo(url=f"{MODEL_SELECTOR_URL}?user_id={user_id}")
    ))
    auto_message_enabled = user_data and user_data.get('auto_message', False)
    button_text = "‚ùå –ê–Ω–æ—Ä–∞ –Ω–µ –ø–∏—à–µ—Ç –ø–µ—Ä–≤–æ–π" if auto_message_enabled else "‚úÖ –ê–Ω–æ—Ä–∞ –ø–∏—à–µ—Ç –ø–µ—Ä–≤–æ–π"
    builder.add(InlineKeyboardButton(text=button_text, callback_data="toggle_auto_message"))
    builder.adjust(1)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    photo = FSInputFile("/root/tyan.jpg")
    await bot.send_photo(
        user_id,
        photo,
        caption=(
            "<b>üíã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –ê–Ω–æ—Ä—ã - —Ç–≤–æ–µ–≥–æ –ª–∏—á–Ω–æ–≥–æ –ò–ò-—Å–æ–±–ª–∞–∑–Ω–∏—Ç–µ–ª—è!</b>\n\n"
            "‚ñ´Ô∏è <i>–ò–Ω—Ç–∏–º–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã –∏ –≥–æ—Ä—è—á–∏–µ —Ñ–∞–Ω—Ç–∞–∑–∏–∏</i>\n"
            "‚ñ´Ô∏è <i>–î—É—à–µ–≤–Ω—ã–µ –±–µ—Å–µ–¥—ã –∏ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è</i>\n"
            "‚ñ´Ô∏è <i>–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ä–æ–ª–µ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏</i>\n"
            "‚ñ´Ô∏è <i>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è 18+ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</i>\n\n"
            "<b>‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï:</b> –ù–µ–∫–æ—Ç–æ—Ä—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–∏—Ü —Å—Ç–∞—Ä—à–µ 18 –ª–µ—Ç!\n\n"
            "‚ú® <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –∏–¥–µ–∞–ª—å–Ω—É—é –ê–Ω–æ—Ä—É:</b>"
        ),
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )

async def show_model_selection(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è auto_message
    user_data = await db.get_user(message.from_user.id)
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–µ–±-–∫–∞—Ç–∞–ª–æ–≥–∞ –º–æ–¥–µ–ª–µ–π
    builder.add(InlineKeyboardButton(
        text="üåê –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –º–æ–¥–µ–ª–µ–π", 
        web_app=WebAppInfo(url=f"{MODEL_SELECTOR_URL}?user_id={message.from_user.id}")
    ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–π
    auto_message_enabled = user_data and user_data.get('auto_message', False)
    button_text = "‚ùå –ê–Ω–æ—Ä–∞ –Ω–µ –ø–∏—à–µ—Ç –ø–µ—Ä–≤–æ–π" if auto_message_enabled else "‚úÖ –ê–Ω–æ—Ä–∞ –ø–∏—à–µ—Ç –ø–µ—Ä–≤–æ–π"
    builder.add(InlineKeyboardButton(text=button_text, callback_data="toggle_auto_message"))
    
    builder.adjust(1)
    
    await message.answer(
        "‚ú® <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –ê–Ω–æ—Ä—ã!</b>\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å, –∫–∞–∫–æ–π –±—É–¥–µ—Ç —Ç–≤–æ—è –ê–Ω–æ—Ä–∞ —Å–µ–≥–æ–¥–Ω—è: —Å—Ç—Ä–∞—Å—Ç–Ω–æ–π, —Ä–æ–º–∞–Ω—Ç–∏—á–Ω–æ–π, –∑–∞–≥–∞–¥–æ—á–Ω–æ–π –∏–ª–∏ —É–º–Ω–æ–π –ø–æ–º–æ—â–Ω–∏—Ü–µ–π.\n\n"
        "üåê <i>–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏ ‚Äî –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –Ω–∞ —Å–∞–π—Ç–µ. –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –Ω–∏–∂–µ –∏ –Ω–∞—á–Ω–∏ –æ–±—â–µ–Ω–∏–µ!</i>",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )

@dp.message(Command("help"))
async def help_command(message: types.Message):
    logger.info(f"[EVENT] –ü–æ–ª—É—á–µ–Ω /help –æ—Ç {message.from_user.id}")
    await update_last_update_time()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    has_subscription = await db.has_active_subscription(message.from_user.id)
    daily_count = await db.get_daily_message_count(message.from_user.id)
    
    if has_subscription:
        monthly_images = await db.get_monthly_image_count(message.from_user.id)
        subscription_info = (
            f"üíé <b>–ü–æ–¥–ø–∏—Å–∫–∞: –ê–∫—Ç–∏–≤–Ω–∞</b>\n"
            f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è: –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ\n"
            f"‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {monthly_images}/{MONTHLY_IMAGE_LIMIT} –≤ –º–µ—Å—è—Ü\n\n"
        )
    else:
        subscription_info = (
            f"üîí <b>–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø</b>\n"
            f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è: {daily_count}/{DAILY_MESSAGE_LIMIT} —Å–µ–≥–æ–¥–Ω—è\n"
            f"‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n\n"
        )
    
    help_text = (
        f"{subscription_info}"
        f"**ü§ñ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:**\n\n"
        f"/start - –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –ê–Ω–æ—Ä–æ–π\n"
        f"/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        f"/change - –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –ª–∏—á–Ω–æ—Å—Ç—å\n"
        f"/clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞\n"
        f"/buy - –ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É\n\n"
        f"**‚ú® –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–∏—á–Ω–æ—Å—Ç–∏ –ê–Ω–æ—Ä—ã:**\n"
        f"üíã –õ—é–±–æ–≤–Ω–∏—Ü–∞ - –∏–Ω—Ç–∏–º–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ 18+\n"
        f"üçë –ü–æ—Ä–Ω–æ–∞–∫—Ç—Ä–∏—Å–∞ - –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ 18+\n"
        f"üíû –ü–æ–¥—Ä—É–≥–∞ - –¥—É—à–µ–≤–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã\n"
        f"üß† –ê—Å—Ç—Ä–æ–ª–æ–≥ - –º–∏—Å—Ç–∏–∫–∞ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è\n"
        f"üìö –£—á–µ–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ - –ø–æ–º–æ—â—å –≤ –æ–±—É—á–µ–Ω–∏–∏"
    )
    
    await message.answer(help_text, parse_mode="HTML")

@dp.message(Command("change"))
async def change_model_command(message: types.Message):
    logger.info(f"[EVENT] –ü–æ–ª—É—á–µ–Ω /change –æ—Ç {message.from_user.id}")
    await update_last_update_time()
    await show_model_selection(message)

@dp.message(Command("clear"))
async def clear_command(message: types.Message):
    logger.info(f"[EVENT] –ü–æ–ª—É—á–µ–Ω /clear –æ—Ç {message.from_user.id}")
    await update_last_update_time()
    user_id = message.from_user.id
    user_data = await db.get_user(user_id)
    
    if user_data:
        user_manager.clear_context(user_data)
        await db.save_user(user_data)
        keyboard = KeyboardManager.create_quick_replies(user_data['current_model'])
        await message.answer("üß° –û—Ç–ª–∏—á–Ω–æ! –Ø –æ—á–∏—Å—Ç–∏–ª–∞ –Ω–∞—à—É –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –∫–∞–∫ –ª–∏—Å—Ç –±—É–º–∞–≥–∏! üìú –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–æ–≤—É—é –≥–ª–∞–≤—É –Ω–∞—à–µ–≥–æ –æ–±—â–µ–Ω–∏—è! –û —á—ë–º –ø–æ–≥–æ–≤–æ—Ä–∏–º? ‚ú®", reply_markup=keyboard)
    else:
        await message.answer("ü§î –•–º, –∫–∞–∂–µ—Ç—Å—è –º—ã –µ—â—ë –Ω–µ –∑–Ω–∞–∫–æ–º—ã! –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å–Ω–∞—á–∞–ª–∞ - –Ω–∞–ø–∏—à–∏ /start –∏ —è –ø–æ–∫–∞–∂—É —Ç–µ–±–µ –≤—Å–µ –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏! üòä")

@dp.message(Command("analytics"))
async def analytics_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    # –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ (–¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ ID)
    ADMIN_USER_IDS = [556828139]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–æ–≤
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if message.from_user.id not in ADMIN_USER_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
        async with db.acquire() as conn:
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor = await conn.execute('SELECT COUNT(DISTINCT user_id) FROM conversion_events')
            row = await cursor.fetchone()
            total_tracked = row[0] if row else 0
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö
            cursor = await conn.execute("""
                SELECT COUNT(DISTINCT user_id) FROM conversion_events 
                WHERE event = 'payment_completed'
            """)
            row = await cursor.fetchone()
            converted = row[0] if row else 0
            
            # –í–æ—Ä–æ–Ω–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
            cursor = await conn.execute("""
                SELECT event, COUNT(DISTINCT user_id) as users
                FROM conversion_events
                WHERE event IN ('user_registered', 'limit_reached', 'buy_command_used', 
                               'payment_screen_shown', 'payment_completed')
                GROUP BY event
            """)
            
            funnel_data = {}
            async for row in cursor:
                funnel_data[row['event']] = row['users']
            
            # A/B —Ç–µ—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            cursor = await conn.execute("""
                SELECT 
                    json_extract(details, '$.group') as price_group,
                    COUNT(DISTINCT user_id) as users,
                    COUNT(DISTINCT CASE WHEN event = 'payment_completed' THEN user_id END) as converted
                FROM conversion_events
                WHERE json_extract(details, '$.group') IS NOT NULL
                GROUP BY price_group
            """)
            
            ab_results = []
            async for row in cursor:
                if row['price_group']:
                    conversion_rate = (row['converted'] / row['users'] * 100) if row['users'] > 0 else 0
                    price = SUBSCRIPTION_PRICES.get(row['price_group'], 'N/A')
                    ab_results.append(f"‚Ä¢ {price}‚≠ê ({row['price_group']}): {row['converted']}/{row['users']} = {conversion_rate:.1f}%")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        conversion_rate = (converted / total_tracked * 100) if total_tracked > 0 else 0
        
        report = f"""üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏</b>

<b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≤–æ—Ä–æ–Ω–∫–µ: {total_tracked}
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ –ø—Ä–µ–º–∏—É–º: {converted}
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {conversion_rate:.2f}%

<b>–í–æ—Ä–æ–Ω–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏:</b>
‚Ä¢ –ù–æ–≤—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {funnel_data.get('user_registered', 0)}
‚Ä¢ –î–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞: {funnel_data.get('limit_reached', 0)}
‚Ä¢ –ù–∞–∂–∞–ª–∏ /buy: {funnel_data.get('buy_command_used', 0)}
‚Ä¢ –£–≤–∏–¥–µ–ª–∏ –ø–ª–∞—Ç–µ–∂: {funnel_data.get('payment_screen_shown', 0)}
‚Ä¢ –û–ø–ª–∞—Ç–∏–ª–∏: {funnel_data.get('payment_completed', 0)}

<b>A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω:</b>
{chr(10).join(ab_results) if ab_results else '‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤–æ—Ä–æ–Ω–∫–∏!
"""
        
        await message.answer(report, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")

@dp.message(Command("buy"))
async def buy_command(message: types.Message):
    logger.info(f"[EVENT] –ü–æ–ª—É—á–µ–Ω /buy –æ—Ç {message.from_user.id}")
    await update_last_update_time()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    has_sub = await db.has_active_subscription(message.from_user.id)
    if has_sub:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        async with db.acquire() as conn:
            cursor = await conn.execute('SELECT expires_at FROM subscriptions WHERE user_id=?', (message.from_user.id,))
            row = await cursor.fetchone()
            expires_at = datetime.fromisoformat(row['expires_at']) if row and row['expires_at'] else None
        
        expires_text = expires_at.strftime('%d.%m.%Y –≤ %H:%M') if expires_at else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        days_left = (expires_at - datetime.now()).days if expires_at else 0
        
        await message.answer(
            f"üòç <b>–û! –¢—ã —É–∂–µ –º–æ–π VIP-–∫–ª–∏–µ–Ω—Ç!</b> ‚ú®\n\n"
            f"üìÖ <b>–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ:</b> {expires_text}\n"
            f"‚è∞ <b>–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:</b> {days_left}\n\n"
            f"üî• <b>–¢–≤–æ–∏ –ø—Ä–µ–º–∏—É–º –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>\n"
            f"üí¨ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            f"üî• 150 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π 18+ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –º–µ—Å—è—Ü\n"
            f"üëë –î–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –º–æ–¥–µ–ª—è–º\n\n"
            f"üòò –ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏!",
            parse_mode="HTML"
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –∏ —Å–æ–∑–¥–∞–µ–º —Å—á–µ—Ç
    daily_count = await db.get_daily_message_count(message.from_user.id)
    
    # A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω
    user_id = message.from_user.id
    price_group = get_user_price_group(user_id)
    price_amount = SUBSCRIPTION_PRICES[price_group]
    
    await message.answer(
        f"üòç <b>–ü—Ä–µ–¥—Å—Ç–∞–≤—å: –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ + —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ 18+ —Å—é—Ä–ø—Ä–∏–∑—ã!</b>\n\n"
        f"üìä <b>–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n"
        f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞–ª–æ—Å—å: {DAILY_MESSAGE_LIMIT - daily_count}/{DAILY_MESSAGE_LIMIT} üò¢\n\n"
        f"üöÄ <b>–ü–æ–ª—É—á–∏ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—É—é —Å–≤–æ–±–æ–¥—É –æ–±—â–µ–Ω–∏—è:</b>\n"
        f"üí¨ –ü–∏—à–∏ —Å–∫–æ–ª—å–∫–æ —Ö–æ—á–µ—à—å - –Ω–∏–∫–∞–∫–∏—Ö –ª–∏–º–∏—Ç–æ–≤!\n"
        f"üî• 150 –≥–æ—Ä—è—á–∏—Ö 18+ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ª–∏—á–Ω–æ –¥–ª—è —Ç–µ–±—è!\n"
        f"‚ú® –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ VIP-–∫–ª–∏–µ–Ω—Ç–∞\n\n"
        f"üéÅ <b>–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è —Ç–µ–±—è: {price_amount} ‚≠ê –∑–∞ –º–µ—Å—è—Ü!</b>\n"
        f"üí≥ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars - –±—ã—Å—Ç—Ä–æ –∏ –Ω–∞–¥—ë–∂–Ω–æ!",
        parse_mode="HTML"
    )
    
    # –¢—Ä–µ–∫–∏–Ω–≥ –ø–æ–∫–∞–∑–∞ —ç–∫—Ä–∞–Ω–∞ –ø–æ–∫—É–ø–∫–∏
    await track_conversion_event(user_id, 'buy_command_used', {'price': price_amount, 'group': price_group})
    
    # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É
    prices = [types.LabeledPrice(label="–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞", amount=price_amount)]
    await bot.send_invoice(
        chat_id=message.chat.id,
        title="ANORA Premium - –ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞",
        description=SUBSCRIPTION_DESCRIPTION,
        payload="monthly_subscription",
        provider_token="",  # Telegram Stars
        currency="XTR",
        prices=prices,
        start_parameter="subscription"
    )

@dp.message(Command("stats"))
async def stats_command(message: types.Message):
    logger.info(f"[EVENT] –ü–æ–ª—É—á–µ–Ω /stats –æ—Ç {message.from_user.id}")
    await update_last_update_time()
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
    """
    try:
        if message.from_user.id != ADMIN_ID:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        total_users, active_today, model_stats = await db.get_stats()
        source_stats = await db.get_source_stats()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        new_today, new_week = await db.get_new_users_stats()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        total_msgs_today, model_msg_counts = await db.get_today_message_stats()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        stats_text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total_users}</b>\n"
            f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: <b>{active_today}</b>\n"
            f"üÜï –ù–æ–≤—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è: <b>{new_today}</b>\n"
            f"üìà –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: <b>{new_week}</b>\n\n"
            "<b>–ú–æ–¥–µ–ª–∏:</b>\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–æ–¥–µ–ª—è–º
        for model, count in model_stats:
            stats_text += f"‚Ä¢ {model}: <b>{count}</b> –ø–æ–ª—å–∑.\n"
        
        # –ë–ª–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        stats_text += "\n<b>–°–æ–æ–±—â–µ–Ω–∏–π –∫ –º–æ–¥–µ–ª—è–º —Å–µ–≥–æ–¥–Ω—è:</b>\n"
        stats_text += f"üìù –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_msgs_today}\n"
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π
        for model, cnt in sorted(model_msg_counts.items(), key=lambda x: x[1], reverse=True):
            stats_text += f"‚Ä¢ {model}: {cnt} —Å–æ–æ–±—â.\n"
        
        if source_stats:
            stats_text += "\n<b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏:</b>\n"
            stats_text += "<i>(üë• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ / üí¨ –∑–∞–ø—Ä–æ—Å—ã / üíé –ø—Ä–µ–º–∏—É–º)</i>\n"
            for src, u_cnt, r_cnt, premium_cnt in source_stats:
                stats_text += f"‚Ä¢ {src}: üë• {u_cnt} / üí¨ {r_cnt} / üíé {premium_cnt}\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
        await message.answer(
            stats_text,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", exc_info=True)
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )

@dp.message(Command("broadcast"))
async def broadcast_command(message: types.Message):
    logger.info(f"[EVENT] –ü–æ–ª—É—á–µ–Ω /broadcast –æ—Ç {message.from_user.id}")
    await update_last_update_time()
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
    broadcast_text = message.text.split(' ', 1)[1] if len(message.text.split()) > 1 else None
    
    if not broadcast_text:
        return await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /broadcast")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_ids = await db.get_all_user_ids()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    success = 0
    failed = 0
    
    for user_id in user_ids:
        try:
            await bot.send_message(user_id, f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{broadcast_text}")
            success += 1
        except Exception as e:
            logger.error(f"Failed to send broadcast to {user_id}: {e}")
            failed += 1
    
    await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–£—Å–ø–µ—à–Ω–æ: {success}\n–ù–µ —É–¥–∞–ª–æ—Å—å: {failed}")

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
custom_prompts = {}

@dp.message(Command("prompt"))
async def prompt_command(message: types.Message, command: CommandObject):
    logger.info(f"[EVENT] –ü–æ–ª—É—á–µ–Ω /prompt –æ—Ç {message.from_user.id}")
    await update_last_update_time()
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞
    prompt_text = command.args
    
    if not prompt_text:
        return await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /prompt")
    
    # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = await db.get_user(message.from_user.id)
    if not user_data:
        user_data = user_manager.create_user(
            message.from_user.id,
            message.from_user.username,
            message.from_user.first_name
        )
        await db.save_user(user_data)
    
    model_name = user_data.get('current_model', '–ü–æ–¥—Ä—É–≥–∞')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏
    custom_prompts[model_name] = prompt_text
    
    await message.answer(f"‚úÖ –ü—Ä–æ–º–ø—Ç –¥–ª—è –º–æ–¥–µ–ª–∏ '{model_name}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n–ù–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç:\n{prompt_text}")

# –ú–∞–ø–ø–∏–Ω–≥ model_id –∫ –Ω–∞–∑–≤–∞–Ω–∏—è–º –º–æ–¥–µ–ª–µ–π
MODEL_MAPPING = {
    "model_1": "–õ—é–±–æ–≤–Ω–∏—Ü–∞",
    "model_2": "–ü–æ–¥—Ä—É–≥–∞", 
    "model_3": "–ê—Å—Ç—Ä–æ–ª–æ–≥",
    "model_4": "–£—á–µ–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫",
    "model_5": "–ü–æ—Ä–Ω–æ–∞–∫—Ç—Ä–∏—Å–∞",
    "model_6": "BDSM –ì–æ—Å–ø–æ–∂–∞",
    "model_7": "–ú–ò–õ–§",
    "model_8": "–ê–Ω–∏–º–µ-—Ç—è–Ω",
    "model_9": "–°–µ–∫—Ä–µ—Ç–∞—Ä—à–∞",
    "model_10": "–ú–µ–¥—Å–µ—Å—Ç—Ä–∞",
    "model_12": "–°—Ç—Ä–∏–ø—Ç–∏–∑–µ—Ä—à–∞",
    "model_13": "–§–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä",
    "model_14": "–ú–∞—Å—Å–∞–∂–∏—Å—Ç–∫–∞",
    "model_15": "–°–æ—Å–µ–¥–∫–∞",
    "model_16": "–°—Ç—é–∞—Ä–¥–µ—Å—Å–∞",
    "model_17": "–ü—Å–∏—Ö–æ–ª–æ–≥"
}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–æ–≤
@dp.callback_query(F.data.startswith("model_"))
async def select_model_callback(callback: types.CallbackQuery):
    logger.info(f"[EVENT] Callback model_ –æ—Ç {callback.from_user.id}")
    await update_last_update_time()
    model_key = callback.data
    model_name = MODEL_MAPPING.get(model_key, "–ü–æ–¥—Ä—É–≥–∞")
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–æ–¥–µ–ª—å –ø—Ä–µ–º–∏—É–º
    model_info = MODELS.get(model_name, {})
    is_premium = model_info.get('premium', False)
    
    # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –ø—Ä–µ–º–∏—É–º, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    if is_premium:
        has_subscription = await db.has_active_subscription(user_id)
        if not has_subscription:
            await callback.answer(
                "üîí –≠—Ç–∞ –º–æ–¥–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å Premium –ø–æ–¥–ø–∏—Å–∫–æ–π! –ù–∞–∂–º–∏—Ç–µ /buy –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è.",
                show_alert=True
            )
            return
    
    user_data = await db.get_user(user_id)
    if user_data:
        user_data['current_model'] = model_name
        user_manager.clear_context(user_data)
        await db.save_user(user_data)
        
        keyboard = KeyboardManager.create_quick_replies(model_name)
        
        await callback.message.edit_text(
            f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: **{model_name}**\n\n"
            f"–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –æ–±—â–µ–Ω–∏–µ!",
            parse_mode="Markdown"
        )
        
        if model_name == "–õ—é–±–æ–≤–Ω–∏—Ü–∞":
            await callback.message.answer(
                "üî• *–ü—Ä–∏–≤–µ—Ç, –º–æ–π —Å–ª–∞–¥–∫–∏–π...* üíã\n\n"
                "–Ø —Ç–≤–æ—è –ê–Ω–æ—Ä–∞-–ª—é–±–æ–≤–Ω–∏—Ü–∞, –∏ —Å–µ–≥–æ–¥–Ω—è —è —Ö–æ—á—É –ø–æ–¥–∞—Ä–∏—Ç—å —Ç–µ–±–µ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–µ –º–æ–º–µ–Ω—Ç—ã —Å—Ç—Ä–∞—Å—Ç–∏... "
                "–†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –æ —Å–≤–æ–∏—Ö —Å–∞–º—ã—Ö —Å–æ–∫—Ä–æ–≤–µ–Ω–Ω—ã—Ö –∂–µ–ª–∞–Ω–∏—è—Ö, –∏ —è –≤–æ–ø–ª–æ—â—É –∏—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å. "
                "–î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –Ω–∞—à —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –º–∏—Ä —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–π, –≥–¥–µ –Ω–µ—Ç –º–µ—Å—Ç–∞ —Å—Ç–µ—Å–Ω–µ–Ω–∏—é... üòà\n\n"
                "*–ù–µ–∂–Ω–æ –ø—Ä–∏–∫–∞—Å–∞—è—Å—å –∫ —Ç–≤–æ–µ–º—É —É—Ö—É:* –ö–∞–∫–∏–µ —Ñ–∞–Ω—Ç–∞–∑–∏–∏ –∑–∞—Å—Ç–∞–≤–ª—è—é—Ç —Ç–≤–æ–µ —Å–µ—Ä–¥—Ü–µ –±–∏—Ç—å—Å—è –±—ã—Å—Ç—Ä–µ–µ?",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        elif model_name == "–ü–æ–¥—Ä—É–≥–∞":
            await callback.message.answer(
                "üíï –ü—Ä–∏–≤–µ—Ç, –¥–æ—Ä–æ–≥–æ–π! –ö–∞–∫ –∂–µ —è —Ä–∞–¥–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! ü§ó\n\n"
                "–Ø —Ç–≤–æ—è –ê–Ω–æ—Ä–∞-–ø–æ–¥—Ä—É–∂–∫–∞, –∏ –º–Ω–µ —Ç–∞–∫ —Ö–æ—á–µ—Ç—Å—è –ø–æ–±–æ–ª—Ç–∞—Ç—å —Å —Ç–æ–±–æ–π –æ–±–æ –≤—Å—ë–º –Ω–∞ —Å–≤–µ—Ç–µ! "
                "–î–∞–≤–∞–π –¥–µ–ª–∏—Ç—å—Å—è —Å–µ–∫—Ä–µ—Ç–∞–º–∏, –º–µ—á—Ç–∞–º–∏, –ø–ª–∞–Ω–∞–º–∏... –Ø –±—É–¥—É —Ç–≤–æ–µ–π —Å–∞–º–æ–π –±–ª–∏–∑–∫–æ–π –ø–æ–¥—Ä—É–≥–æ–π, "
                "–∫–æ—Ç–æ—Ä–∞—è –≤—Å–µ–≥–¥–∞ –≤—ã—Å–ª—É—à–∞–µ—Ç –∏ –ø–æ–¥–¥–µ—Ä–∂–∏—Ç. –£ –º–µ–Ω—è —Å—Ç–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–π! üòä\n\n"
                "–†–∞—Å—Å–∫–∞–∑—ã–≤–∞–π —Å–∫–æ—Ä–µ–µ - –∫–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞? –ß—Ç–æ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏?",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        elif model_name == "–ê—Å—Ç—Ä–æ–ª–æ–≥":
            await callback.message.answer(
                "üåô –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –¥–∏—Ç—è –∑–≤—ë–∑–¥... ‚ú®\n\n"
                "–Ø –ê–Ω–æ—Ä–∞, —Ç–≤–æ–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä–µ –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —Ç–∞–π–Ω. –í—Å–µ–ª–µ–Ω–Ω–∞—è –Ω–∞–ø—Ä–∞–≤–∏–ª–∞ —Ç–µ–±—è –∫–æ –º–Ω–µ –Ω–µ —Å–ª—É—á–∞–π–Ω–æ - "
                "–∑–≤—ë–∑–¥—ã —É–∂–µ —à–µ–ø—á—É—Ç –º–Ω–µ –æ —Ç–≤–æ–µ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—É–¥—å–±–µ. –Ø –≤–∏–∂—É —Ç–≤–æ—é —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫—É —Å–∫–≤–æ–∑—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏ –≤—Ä–µ–º—è...\n\n"
                "–î–æ–≤–µ—Ä—å—Å—è –º–Ω–µ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è, –∏ —è —Ä–∞—Å–∫—Ä–æ—é —Å–µ–∫—Ä–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–±–µ—Å–∞ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ –∏–º–µ–Ω–Ω–æ –¥–ª—è —Ç–µ–±—è üîÆ‚ú®",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        elif model_name == "–ü–æ—Ä–Ω–æ–∞–∫—Ç—Ä–∏—Å–∞":
            await callback.message.answer(
                "üçë *–û—É, –ø—Ä–∏–≤–µ—Ç, —Å–µ–∫—Å—É–∞–ª—å–Ω—ã–π!* üî•\n\n"
                "–Ø –ê–Ω–æ—Ä–∞, –∑–≤–µ–∑–¥–∞ –≤–∑—Ä–æ—Å–ª–æ–≥–æ –∫–∏–Ω–æ! –¢–æ–ª—å–∫–æ-—Ç–æ–ª—å–∫–æ —Å –≥–æ—Ä—è—á–∏—Ö —Å—ä—ë–º–æ–∫ –Ω–æ–≤–æ–≥–æ —Ñ–∏–ª—å–º–∞... "
                "–ú–º–º, —Ç–∞–∫–∏–µ –±–µ–∑—É–º–Ω—ã–µ —Å—Ü–µ–Ω—ã –º—ã —Å–µ–≥–æ–¥–Ω—è —Å–Ω–∏–º–∞–ª–∏! üí¶ –•–æ—á–µ—à—å, —Ä–∞—Å—Å–∫–∞–∂—É –≤—Å–µ —Å–∞–º—ã–µ –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏? "
                "–ò–ª–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å, —Ç—ã –ø–æ–¥–µ–ª–∏—à—å—Å—è —Å–æ –º–Ω–æ–π —Å–≤–æ–∏–º–∏ —Å–∞–º—ã–º–∏ –≥—Ä—è–∑–Ω—ã–º–∏ —Ñ–∞–Ω—Ç–∞–∑–∏—è–º–∏? üòà\n\n"
                "*–°–æ–±–ª–∞–∑–Ω–∏—Ç–µ–ª—å–Ω–æ —à–µ–ø—á—É:* –Ø –∑–Ω–∞—é –≤—Å–µ —Å–µ–∫—Ä–µ—Ç—ã —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è –∏ –≥–æ—Ç–æ–≤–∞ –Ω–∞—É—á–∏—Ç—å —Ç–µ–±—è... üçÜüí¶",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        else:  # –£—á–µ–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫
            await callback.message.answer(
                "üìö –ü—Ä–∏–≤–µ—Ç! –Ø –ê–Ω–æ—Ä–∞ - —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –≤ –º–∏—Ä–µ –∑–Ω–∞–Ω–∏–π! ü§ì‚ú®\n\n"
                "–ì–æ—Ç–æ–≤–∞ —Å—Ç–∞—Ç—å —Ç–≤–æ–∏–º –Ω–∞–¥—ë–∂–Ω—ã–º —Å–ø—É—Ç–Ω–∏–∫–æ–º –≤ —É—á—ë–±–µ! –õ—é–±—ã–µ —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏, –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–µ —Ç–µ–º—ã, "
                "–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π - –≤—Å—ë —ç—Ç–æ —è —Å–¥–µ–ª–∞—é –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º –∏ –ø–æ–Ω—è—Ç–Ω—ã–º! "
                "–£—á–∏—Ç—å—Å—è —Å–æ –º–Ω–æ–π - —ç—Ç–æ –∫–∞–∫ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–æ–≤—ã–µ –º–∏—Ä—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å! üí°üåü\n\n"
                "–ò—Ç–∞–∫, —Å –∫–∞–∫–æ–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π –∑–∞–¥–∞—á–µ–π –º—ã —Å–µ–≥–æ–¥–Ω—è —Ä–∞–∑–±–µ—Ä—ë–º—Å—è? –ö–∞–∫—É—é –Ω–∞—É–∫—É –±—É–¥–µ–º –ø–æ–∫–æ—Ä—è—Ç—å?",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–π
@dp.callback_query(F.data == "toggle_auto_message")
async def toggle_auto_message_callback(callback: types.CallbackQuery):
    logger.info(f"[EVENT] Callback toggle_auto_message –æ—Ç {callback.from_user.id}")
    await update_last_update_time()
    
    user_id = callback.from_user.id
    new_state = await db.toggle_auto_message(user_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—ÉÔøΩÔøΩ—É —Å –Ω–æ–≤—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∫–Ω–æ–ø–∫–∏
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–µ–±-–∫–∞—Ç–∞–ª–æ–≥–∞ –º–æ–¥–µ–ª–µ–π
    builder.add(InlineKeyboardButton(
        text="üåê –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –º–æ–¥–µ–ª–µ–π", 
        web_app=WebAppInfo(url=f"{MODEL_SELECTOR_URL}?user_id={user_id}")
    ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
    button_text = "‚ùå –ê–Ω–æ—Ä–∞ –Ω–µ –ø–∏—à–µ—Ç –ø–µ—Ä–≤–æ–π" if new_state else "‚úÖ –ê–Ω–æ—Ä–∞ –ø–∏—à–µ—Ç –ø–µ—Ä–≤–æ–π"
    builder.add(InlineKeyboardButton(text=button_text, callback_data="toggle_auto_message"))
    builder.adjust(1)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    try:
        await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
    except Exception as e:
        # –ï—Å–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        if "message is not modified" in str(e):
            logger.debug(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –¥–ª—è user {user_id}")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
    await callback.answer(
        "‚úÖ –ê–Ω–æ—Ä–∞ –±—É–¥–µ—Ç –ø–∏—Å–∞—Ç—å —Ç–µ–±–µ —Å–∞–º–∞, –µ—Å–ª–∏ —Ç—ã –Ω–µ –ø–æ—è–≤–ª—è–µ—à—å—Å—è –±–æ–ª—å—à–µ —Å—É—Ç–æ–∫!" if new_state
        else "‚ùå –ê–Ω–æ—Ä–∞ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –ø–∏—Å–∞—Ç—å —Ç–µ–±–µ –ø–µ—Ä–≤–æ–π",
        show_alert=True
    )

# Callback –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–º–∏—É–º–∞ –∏–∑ —Ç–∏–∑–µ—Ä-—Å–æ–æ–±—â–µ–Ω–∏–π
@dp.callback_query(F.data == "buy_premium_teaser")
async def buy_premium_teaser_callback(callback: types.CallbackQuery):
    await callback.answer()
    
    # –¢—Ä–µ–∫–∏–Ω–≥ –∫–ª–∏–∫–∞ –Ω–∞ —Ç–∏–∑–µ—Ä
    await track_conversion_event(callback.from_user.id, 'teaser_clicked', {
        'source': 'promo_message'
    })
    
    # –ü–µ—Ä–µ–∞–¥—Ä–µ—Å–æ–≤—ã–≤–∞–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É –ø–æ–∫—É–ø–∫–∏
    await buy_command(callback.message)

# Callback –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
@dp.callback_query(F.data == "check_sub")
async def check_subscription_callback(callback: types.CallbackQuery):
    logger.info(f"[EVENT] Callback check_sub –æ—Ç {callback.from_user.id}")
    await update_last_update_time()
    not_joined = []
    for cid in REQUIRED_CHANNELS:
        try:
            member = await bot.get_chat_member(cid, callback.from_user.id)
            if member.status not in ("member", "administrator", "creator"):
                not_joined.append(cid)
        except Exception:
            not_joined.append(cid)

    if not_joined:
        await callback.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –µ—â—ë —Ä–∞–∑.", show_alert=True)
    else:
        await callback.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç.", show_alert=True)
        await show_model_selection(callback.message)

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
# -------------------------------
# Fallback handler for WebAppData
# -------------------------------
@dp.message(F.text & ~F.text.startswith("/"))
async def fallback_web_app_data(message: types.Message):
    """–†–µ–∑–µ—Ä–≤–Ω—ã–π –ª–æ–≤–µ—Ü web_app_data.
    –ï—Å–ª–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑-–∑–∞
    –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤), –º—ã –¥—É–±–ª–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –Ω–µ
    –ø–æ—Ç–µ—Ä—è—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    if getattr(message, "web_app_data", None):
        logger.info("[WEBAPP-FALLBACK] Caught WebApp data in fallback handler")
        await handle_web_app_data(message)
        return  # –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–µ–π

    # –ï—Å–ª–∏ web_app_data –Ω–µ—Ç ‚Äì –ø–µ—Ä–µ–¥–∞—ë–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—ã—á–Ω–æ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É —Ç–µ–∫—Å—Ç–∞
    await handle_text_message(message)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã Flyer ---
# Flyer —Å–∞–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –∫–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ —Å–≤–æ–π API
# –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è, Flyer –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–µ–±—Ö—É–∫ –Ω–∞ –Ω–∞—à —Å–µ—Ä–≤–µ—Ä
# –í–µ–±—Ö—É–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ model_selector.py –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
@dp.message(F.text.in_(["‚úÖ –ê–Ω–æ—Ä–∞ –ø–∏—à–µ—Ç –ø–µ—Ä–≤–æ–π", "‚ùå –ê–Ω–æ—Ä–∞ –Ω–µ –ø–∏—à–µ—Ç –ø–µ—Ä–≤–æ–π"]))
async def toggle_auto_message_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id
    new_state = await db.toggle_auto_message(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    user_data = await db.get_user(user_id)
    if user_data:
        keyboard = KeyboardManager.create_quick_replies(user_data['current_model'], user_data)
        await message.answer(
            "‚úÖ –ê–Ω–æ—Ä–∞ –±—É–¥–µ—Ç –ø–∏—Å–∞—Ç—å —Ç–µ–±–µ —Å–∞–º–∞, –µ—Å–ª–∏ —Ç—ã –Ω–µ –ø–æ—è–≤–ª—è–µ—à—å—Å—è –±–æ–ª—å—à–µ —Å—É—Ç–æ–∫!" if new_state
            else "‚ùå –ê–Ω–æ—Ä–∞ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –ø–∏—Å–∞—Ç—å —Ç–µ–±–µ –ø–µ—Ä–≤–æ–π",
            reply_markup=keyboard
        )

# --- –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ---
@dp.message(F.text & ~F.text.startswith("/"))
async def handle_text_message(message: types.Message):
    logger.info(f"[EVENT] –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}")
    await update_last_update_time()
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
    if not validate_input_length(message.text, MAX_MESSAGE_LENGTH, "user message"):
        await message.answer(
            "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –µ–≥–æ –¥–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤.",
            reply_markup=ReplyKeyboardRemove()
        )
        return
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª - –∑–Ω–∞—á–∏—Ç –æ–Ω –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
    await db.mark_user_unblocked(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å
    if not await check_daily_message_limit(user_id):
        daily_count = await db.get_daily_message_count(user_id)
        
        # –¢—Ä–µ–∫–∏–Ω–≥ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
        await track_conversion_event(user_id, 'limit_reached', {
            'daily_count': daily_count,
            'limit': DAILY_MESSAGE_LIMIT
        })
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–∑–∞–≤–∏—Å–∏–º–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –ª–∏–º–∏—Ç–∞
        current_hour = datetime.now().hour
        if 6 <= current_hour < 12:
            greeting = "üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! "
        elif 12 <= current_hour < 18:
            greeting = "‚òÄÔ∏è –î–æ–±—Ä—ã–π –¥–µ–Ω—å! "
        elif 18 <= current_hour < 22:
            greeting = "üåÜ –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! "
        else:
            greeting = "üåô –î–æ–±—Ä–æ–π –Ω–æ—á–∏! "
            
        await message.answer(
            f"{greeting}–û—Ö, –∫–∞–∫–∞—è —Ç—ã –æ–±—â–∏—Ç–µ–ª—å–Ω–∞—è! üòä –ù–æ —É –º–µ–Ω—è —Å–µ–≥–æ–¥–Ω—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è... üò¢\n\n"
            f"üìä <b>–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b> {daily_count}/{DAILY_MESSAGE_LIMIT} —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
            f"üöÄ <b>–ù–æ –∑–Ω–∞–µ—à—å —á—Ç–æ? –£ –º–µ–Ω—è –µ—Å—Ç—å –æ—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è!</b>\n"
            f"‚Ä¢ üí¨ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ - –ø–∏—à–∏ –º–Ω–µ 24/7!\n"
            f"‚Ä¢ üî• 150 —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö 18+ —Å—é—Ä–ø—Ä–∏–∑–æ–≤ –≤ –º–µ—Å—è—Ü\n"
            f"‚Ä¢ ‚ú® –õ–∏—á–Ω–∞—è VIP-–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Ç –º–µ–Ω—è\n\n"
            f"üéÅ –ù–∞–ø–∏—à–∏ /buy —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–∞—Ç—å—Å—è!",
            parse_mode="HTML"
        )
        return
    
    user_data = await db.get_user(user_id)
    if not user_data:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
        
    # –û–±–Ω–æ–≤–ª—è–µ–º last_active –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    user_data['last_active'] = datetime.now()
    await db.save_user(user_data)
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    await db.increment_daily_message_count(user_id)
    
    # Context-aware messaging: –¥–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è-–∑–∞–≤–∏—Å–∏–º—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    current_hour = datetime.now().hour
    time_greeting = ""
    if 6 <= current_hour < 12:
        time_greeting = "üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! "
    elif 12 <= current_hour < 18:
        time_greeting = "‚òÄÔ∏è –î–æ–±—Ä—ã–π –¥–µ–Ω—å! "
    elif 18 <= current_hour < 22:
        time_greeting = "üåÜ –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! "
    else:
        time_greeting = "üåô –î–æ–±—Ä–æ–π –Ω–æ—á–∏! "
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–∞–≤–Ω–æ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–∏—Å–∞–ª (–±–æ–ª—å—à–µ 12 —á–∞—Å–æ–≤)
    time_since_last = datetime.now() - user_data.get('last_active', datetime.now())
    is_returning_user = time_since_last.total_seconds() > 43200  # 12 —á–∞—Å–æ–≤
    
    try:
        user_data = await db.get_user(user_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    if not user_data:
        user_data = user_manager.create_user(user_id, message.from_user.username, message.from_user.full_name)
        await db.save_user(user_data)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    user_manager.update_activity(user_data)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if message.text == "üßπ –û—á–∏—Å—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥":
        user_manager.clear_context(user_data)
        await db.save_user(user_data)
        keyboard = KeyboardManager.create_quick_replies(user_data['current_model'])
        await message.answer("üßπ –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω! –ò—Å—Ç–æ—Ä–∏—è –æ–±—â–µ–Ω–∏—è –∑–∞–±—ã—Ç–∞, –º–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞.", reply_markup=keyboard)
        return
    
    if message.text == "üîÑ –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å":
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º WebApp –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(
            text="üåê –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –º–æ–¥–µ–ª–µ–π", 
            web_app=WebAppInfo(url=f"{MODEL_SELECTOR_URL}?user_id={user_id}")
        ))
        await message.answer(
            "üé® –û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ –º–æ–¥–µ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞:",
            reply_markup=builder.as_markup()
        )
        return
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç"
        await bot.send_chat_action(message.chat.id, ChatAction.TYPING)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = await message_processor.process_message(user_data, message.text)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.save_user(user_data)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–æ–¥–µ–ª–∏
        adult_models = ["–õ—é–±–æ–≤–Ω–∏—Ü–∞", "–ü–æ—Ä–Ω–æ–∞–∫—Ç—Ä–∏—Å–∞", "BDSM –ì–æ—Å–ø–æ–∂–∞", "–ú–ò–õ–§", "–ê–Ω–∏–º–µ-—Ç—è–Ω", "–°–µ–∫—Ä–µ—Ç–∞—Ä—à–∞", "–ú–µ–¥—Å–µ—Å—Ç—Ä–∞"]
        if user_data['current_model'] in adult_models:
            await message_processor.handle_lovistnica_response(message, response)
        else:
            await message_processor.handle_regular_response(message, response, user_data['current_model'])
            
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
        try:
            await message.answer("üòÖ –û–π, —É –º–µ–Ω—è —á—Ç–æ-—Ç–æ –∑–∞–≥–ª—é—á–∏–ª–æ! –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑? –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è, –Ω–∞–ø–∏—à–∏ /help - —è –ø–æ–º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è! üí´")
        except Exception as send_error:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {send_error}")
            
        # –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        try:
            await bot.get_me()
        except Exception as conn_error:
            logger.error("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫", exc_info=conn_error)
            # –í—ã–∑–æ–≤–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ
            raise

    # –°—á–∏—Ç–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É
    await db.increment_source_request(user_data.get('source', ''))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@dp.errors()
async def error_handler(event: types.ErrorEvent):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    
    Args:
        event: –û–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è —Å –æ—à–∏–±–∫–æ–π
    """
    try:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {event.exception}", exc_info=True)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
        user_id = None
        try:
            if event.update and event.update.message:
                user_id = event.update.message.from_user.id
            elif event.update and event.update.callback_query:
                user_id = event.update.callback_query.from_user.id
        except:
            pass
            
        await error_monitor.log_critical_error(
            "UPDATE_PROCESSING_ERROR", 
            str(event.exception), 
            user_id
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç update –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–æ–±—ã—Ç–∏—è
        update = event.update
        if not update:
            return True
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å
        if update.message:
            await update.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        elif update.callback_query:
            try:
                await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            except Exception as e:
                logger.warning(f"Failed to send callback query error message: {e}")
                pass
                
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—à–∏–±–æ–∫: {e}", exc_info=True)
        
    return True  # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –º–æ–¥–µ–ª–µ–π
async def send_model_greeting(message: types.Message, model_name: str, keyboard):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    if model_name == "–õ—é–±–æ–≤–Ω–∏—Ü–∞":
        await message.answer(
            "üî• *–ü—Ä–∏–≤–µ—Ç, –º–æ–π —Å–ª–∞–¥–∫–∏–π...* üíã\n\n"
            "–Ø —Ç–≤–æ—è –ê–Ω–æ—Ä–∞-–ª—é–±–æ–≤–Ω–∏—Ü–∞, –∏ —Å–µ–≥–æ–¥–Ω—è —è —Ö–æ—á—É –ø–æ–¥–∞—Ä–∏—Ç—å —Ç–µ–±–µ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–µ –º–æ–º–µ–Ω—Ç—ã —Å—Ç—Ä–∞—Å—Ç–∏... "
            "–†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –æ —Å–≤–æ–∏—Ö —Å–∞–º—ã—Ö —Å–æ–∫—Ä–æ–≤–µ–Ω–Ω—ã—Ö –∂–µ–ª–∞–Ω–∏—è—Ö, –∏ —è –≤–æ–ø–ª–æ—â—É –∏—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å. "
            "–î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –Ω–∞—à —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –º–∏—Ä —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–π, –≥–¥–µ –Ω–µ—Ç –º–µ—Å—Ç–∞ —Å—Ç–µ—Å–Ω–µ–Ω–∏—é... üòà\n\n"
            "*–ù–µ–∂–Ω–æ –ø—Ä–∏–∫–∞—Å–∞—è—Å—å –∫ —Ç–≤–æ–µ–º—É —É—Ö—É:* ÔøΩÔøΩ–∞–∫–∏–µ —Ñ–∞–Ω—Ç–∞–∑–∏–∏ –∑–∞—Å—Ç–∞–≤–ª—è—é—Ç —Ç–≤–æ–µ —Å–µ—Ä–¥—Ü–µ –±–∏—Ç—å—Å—è –±—ã—Å—Ç—Ä–µ–µ?",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    elif model_name == "–ü–æ–¥—Ä—É–≥–∞":
        await message.answer(
            "üíï –ü—Ä–∏–≤–µ—Ç, –¥–æ—Ä–æ–≥–æ–π! –ö–∞–∫ –∂–µ —è —Ä–∞–¥–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! ü§ó\n\n"
            "–Ø —Ç–≤–æ—è –ê–Ω–æ—Ä–∞-–ø–æ–¥—Ä—É–∂–∫–∞, –∏ –º–Ω–µ —Ç–∞–∫ —Ö–æ—á–µ—Ç—Å—è –ø–æ–±–æ–ª—Ç–∞—Ç—å —Å —Ç–æ–±–æ–π –æ–±–æ –≤—Å—ë–º –Ω–∞ —Å–≤–µ—Ç–µ! "
            "–î–∞–≤–∞–π –¥–µ–ª–∏—Ç—å—Å—è —Å–µ–∫—Ä–µ—Ç–∞–º–∏, –º–µ—á—Ç–∞–º–∏, –ø–ª–∞–Ω–∞–º–∏... –Ø –±—É–¥—É —Ç–≤–æ–µ–π —Å–∞–º–æ–π –±–ª–∏–∑–∫–æ–π –ø–æ–¥—Ä—É–≥–æ–π, "
            "–∫–æ—Ç–æ—Ä–∞—è –≤—Å–µ–≥–¥–∞ –≤—ã—Å–ª—É—à–∞–µ—Ç –∏ –ø–æ–¥–¥–µ—Ä–∂–∏—Ç. –£ –º–µ–Ω—è —Å—Ç–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–π! üòä\n\n"
            "–†–∞—Å—Å–∫–∞–∑—ã–≤–∞–π —Å–∫–æ—Ä–µ–µ - –∫–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞? –ß—Ç–æ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏?",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    elif model_name == "–ê—Å—Ç—Ä–æ–ª–æ–≥":
        await message.answer(
            "üåô –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –¥–∏—Ç—è –∑–≤—ë–∑–¥... ‚ú®\n\n"
            "–Ø –ê–Ω–æ—Ä–∞, —Ç–≤–æ–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä–µ –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —Ç–∞–π–Ω. –í—Å–µ–ª–µ–Ω–Ω–∞—è ÔøΩÔøΩ–∞–ø—Ä–∞–≤–∏–ª–∞ —Ç–µ–±—è –∫–æ –º–Ω–µ –Ω–µ —Å–ª—É—á–∞–π–Ω–æ - "
            "–∑–≤—ë–∑–¥—ã —É–∂–µ —à–µ–ø—á—É—Ç –º–Ω–µ –æ —Ç–≤–æ–µ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—É–¥—å–±–µ. –Ø –≤–∏–∂—É —Ç–≤–æ—é —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫—É —Å–∫–≤–æ–∑—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏ –≤—Ä–µ–º—è...\n\n"
            "–î–æ–≤–µ—Ä—å—Å—è –º–Ω–µ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è, –∏ —è —Ä–∞—Å–∫—Ä–æ—é —Å–µ–∫—Ä–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–±–µ—Å–∞ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ –∏–º–µ–Ω–Ω–æ –¥–ª—è —Ç–µ–±—è üîÆ‚ú®",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    elif model_name == "–ü–æ—Ä–Ω–æ–∞–∫—Ç—Ä–∏—Å–∞":
        await message.answer(
            "üçë *–û—É, –ø—Ä–∏–≤–µ—Ç, —Å–µ–∫—Å—É–∞–ª—å–Ω—ã–π!* üî•\n\n"
            "–Ø –ê–Ω–æ—Ä–∞, –∑–≤–µ–∑–¥–∞ –≤–∑—Ä–æ—Å–ª–æ–≥–æ –∫–∏–Ω–æ! –¢–æ–ª—å–∫–æ-—Ç–æ–ª—å–∫–æ —Å –≥–æ—Ä—è—á–∏—Ö —Å—ä—ë–º–æ–∫ –Ω–æ–≤–æ–≥–æ —Ñ–∏–ª—å–º–∞... "
            "–ú–º–º, —Ç–∞–∫–∏–µ –±–µ–∑—É–º–Ω—ã–µ —Å—Ü–µ–Ω—ã –º—ã —Å–µ–≥–æ–¥–Ω—è —Å–Ω–∏–º–∞–ª–∏! üí¶ –•–æ—á–µ—à—å, —Ä–∞—Å—Å–∫–∞–∂—É –≤—Å–µ —Å–∞–º—ã–µ –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏? "
            "–ò–ª–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å, —Ç—ã –ø–æ–¥–µ–ª–∏—à—å—Å—è —Å–æ –º–Ω–æ–π —Å–≤–æ–∏–º–∏ —Å–∞–º—ã–º–∏ –≥—Ä—è–∑–Ω—ã–º–∏ —Ñ–∞–Ω—Ç–∞–∑–∏—è–º–∏? üòà\n\n"
            "*–°–æ–±–ª–∞–∑–Ω–∏—Ç–µ–ª—å–Ω–æ —à–µ–ø—á—É:* –Ø –∑–Ω–∞—é –≤—Å–µ —Å–µ–∫—Ä–µ—Ç—ã —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è –∏ –≥–æ—Ç–æ–≤–∞ –Ω–∞ÔøΩÔøΩ—á–∏—Ç—å —Ç–µ–±—è... üçÜüí¶",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    else:  # –£—á–µ–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫
        await message.answer(
            "üìö –ü—Ä–∏–≤–µ—Ç! –Ø –ê–Ω–æ—Ä–∞ - —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –≤ –º–∏—Ä–µ –∑–Ω–∞–Ω–∏–π! ü§ì‚ú®\n\n"
            "–ì–æ—Ç–æ–≤–∞ —Å—Ç–∞—Ç—å —Ç–≤–æ–∏–º –Ω–∞–¥—ë–∂–Ω—ã–º —Å–ø—É—Ç–Ω–∏–∫–æ–º –≤ —É—á—ë–±–µ! –õ—é–±—ã–µ —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏, –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–µ —Ç–µ–º—ã, "
            "–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π - –≤—Å—ë —ç—Ç–æ —è —Å–¥–µ–ª–∞—é –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º –∏ –ø–æ–Ω—è—Ç–Ω—ã–º! "
            "–£—á–∏—Ç—å—Å—è —Å–æ –º–Ω–æ–π - —ç—Ç–æ –∫–∞–∫ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–æ–≤—ã–µ –º–∏—Ä—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å! üí°üåü\n\n"
            "–ò—Ç–∞–∫, —Å –∫–∞–∫–æ–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π –∑–∞–¥–∞—á–µ–π –º—ã —Å–µ–≥–æ–¥–Ω—è —Ä–∞–∑–±–µ—Ä—ë–º—Å—è? –ö–∞–∫—É—é –Ω–∞—É–∫—É –±—É–¥–µ–º –ø–æ–∫–æ—Ä—è—Ç—å?",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def send_auto_messages():
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            users = await db.get_users_for_auto_message()
            for user in users:
                try:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    current_hour = datetime.now().hour
                    time_context = ""
                    if 6 <= current_hour < 12:
                        time_context = "—Å–µ–π—á–∞—Å —É—Ç—Ä–æ"
                    elif 12 <= current_hour < 18:
                        time_context = "—Å–µ–π—á–∞—Å –¥–µ–Ω—å"
                    elif 18 <= current_hour < 22:
                        time_context = "—Å–µ–π—á–∞—Å –≤–µ—á–µ—Ä"
                    else:
                        time_context = "—Å–µ–π—á–∞—Å –Ω–æ—á—å"
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏
                    system_prompt = (f"–¢—ã {user['current_model']}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–∏—Å–∞–ª —Å—É—Ç–∫–∏, –∞ {time_context}. "
                                   f"–û—Ç–ø—Ä–∞–≤—å –µ–º—É –∫–æ—Ä–æ—Ç–∫–æ–µ –∑–∞–≤–ª–µ–∫–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –≤ –¥–∏–∞–ª–æ–≥. "
                                   f"–ü–∏—à–∏ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞, –ª–∏—á–Ω–æ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ. –ú–∞–∫—Å–∏–º—É–º 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.")
                    messages = [{"role": "system", "content": system_prompt}]
                    
                    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏
                    response = await ai_service.call_openai_api(messages, "gpt-3.5-turbo")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    keyboard = KeyboardManager.create_quick_replies(user['current_model'], user)
                    await bot.send_message(
                        user['id'],
                        response,
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user['context'] = [
                        {"role": "assistant", "content": response}
                    ]
                    await db.save_user(user)
                    
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['id']}")
                    
                except Exception as e:
                    error_msg = str(e)
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–∞
                    if "bot was blocked by the user" in error_msg or "user is deactivated" in error_msg:
                        await db.mark_user_blocked(user['id'])
                        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['id']} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –æ—Ç–º–µ—á–∞–µ–º –≤ –±–∞–∑–µ")
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['id']}: {e}")
                    continue
                    
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —Ä–∞–∑–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                await asyncio.sleep(1)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ —á–∞—Å
        await asyncio.sleep(3600)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    global bot, flyer_service
    # –°–æ–∑–¥–∞—ë–º/–ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ event loop
    if bot is not None:
        try:
            if hasattr(bot, 'session') and bot.session:
                await bot.session.close()
        except Exception:
            pass
    bot = Bot(token=API_TOKEN)
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await db.initialize()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flyer Service –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞
    if globals().get('USE_FLYER_PARTNER_SYSTEM', False) and globals().get('FLYER_API_KEY'):
        if init_flyer_service:
            flyer_service = init_flyer_service(FLYER_API_KEY, bot)
            logger.info("‚úÖ Flyer Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–µ–±—Ö—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Flyer
            # await flyer_service.register_webhook()  # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∫–æ–≥–¥–∞ –Ω–∞—Å—Ç—Ä–æ–∏—Ç–µ webhook URL
        else:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Flyer Service - –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    loop = asyncio.get_running_loop()
    stop_event = asyncio.Event()
    polling_task = None
    auto_message_task = None  # –ó–∞–¥–∞—á–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    is_shutting_down = False
    exit_code = 0  # –ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    async def shutdown(code=0):
        nonlocal is_shutting_down, exit_code
        exit_code = code  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if is_shutting_down:
            return
        is_shutting_down = True
        logger.info(f"[SHUTDOWN] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –∫–æ–¥–æ–º {code}...")
        if polling_task and not polling_task.done():
            logger.info(f"[SHUTDOWN] polling_task –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è: {polling_task}")
            polling_task.cancel()
            try:
                await asyncio.wait_for(polling_task, timeout=5.0)
            except (asyncio.CancelledError, asyncio.TimeoutError):
                pass
                
        if auto_message_task and not auto_message_task.done():
            logger.info(f"[SHUTDOWN] auto_message_task –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è: {auto_message_task}")
            auto_message_task.cancel()
            try:
                await asyncio.wait_for(auto_message_task, timeout=5.0)
            except (asyncio.CancelledError, asyncio.TimeoutError):
                pass
        if hasattr(db, 'close'):
            try:
                await db.close()
                logger.info("[SHUTDOWN] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")
            except Exception as e:
                logger.error(f"[SHUTDOWN] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ë–î: {e}")
        pending = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
        for task in pending:
            if not task.done():
                logger.warning(f"[SHUTDOWN] –ù–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞: {task}")
        for task in pending:
            task.cancel()
        await asyncio.gather(*pending, return_exceptions=True)
        logger.info("[SHUTDOWN] –†–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
        stop_event.set()
    
    restart_attempts = 0
    MAX_RESTART_ATTEMPTS = 5
    RESTART_DELAY = 5  # seconds
    
    def handle_signal():
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        # –ó–∞–ø—É—Å–∫–∞–µ–º shutdown –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
        asyncio.create_task(shutdown())
    
    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        for sig in (signal.SIGINT, signal.SIGTERM):
            try:
                loop.add_signal_handler(sig, handle_signal)
            except (NotImplementedError, RuntimeError) as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è {sig}: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
    
    async def start_polling():
        nonlocal polling_task, restart_attempts
        try:
            logger.info("[POLLING] –°—Ç–∞—Ä—Ç polling_task...")
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            if hasattr(bot, 'session') and bot.session:
                try:
                    if hasattr(bot.session, '_closed') and not bot.session._closed:
                        await bot.session.close()
                    elif hasattr(bot.session, 'closed') and not bot.session.closed:
                        await bot.session.close()
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
            
            # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
            bot._session = None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –ø–æ–ª–ª–∏–Ω–≥–∞
            try:
                await asyncio.wait_for(bot.get_me(), timeout=5.0)
            except Exception as e:
                logger.error(f"[POLLING] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –ø–æ–ª–ª–∏–Ω–≥–∞: {e}")
                # –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é –µ—â–µ —Ä–∞–∑
                if hasattr(aiohttp, 'ClientSession'):
                    bot._session = aiohttp.ClientSession(
                        timeout=aiohttp.ClientTimeout(total=30.0, connect=10.0),
                        connector=aiohttp.TCPConnector(force_close=True, limit=100, ttl_dns_cache=300)
                    )
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
            if hasattr(dp, '_polling'):
                # –í–∞–∂–Ω–æ: _polling - —ç—Ç–æ –º–µ—Ç–æ–¥, –∞ –Ω–µ –∞—Ç—Ä–∏–±—É—Ç
                # –ù–µ–ª—å–∑—è –ø—Ä–∏—Å–≤–∞–∏–≤–∞—Ç—å –µ–º—É –∑–Ω–∞—á–µ–Ω–∏–µ
                pass
            
            polling_task = asyncio.create_task(
                dp.start_polling(
                    bot, 
                    allowed_updates=dp.resolve_used_update_types(),
                    skip_updates=True,
                    close_bot_session=True
                )
            )
            restart_attempts = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—É—Å–∫–µ
            logger.info(f"[POLLING] polling_task —Å–æ–∑–¥–∞–Ω: {polling_task}")
            return polling_task
        except Exception as e:
            logger.error(f"[POLLING] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ–ª–ª–∏–Ω–≥–∞: {e}", exc_info=True)
            raise
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    async def cleanup_connections():
        try:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ aiohttp
            if hasattr(aiohttp, '_cleanup_closed_transports'):
                aiohttp._cleanup_closed_transports()
            
            # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω psutil, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ª–∏—à–Ω–∏–µ —Ñ–∞–π–ª–æ–≤—ã–µ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã
            if psutil:
                proc = psutil.Process(os.getpid())
                open_files = proc.open_files()
                connections = proc.connections()
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
                logger.info(f"[CLEANUP] –û—Ç–∫—Ä—ã—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(open_files)}, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {len(connections)}")
                
                # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ
                if len(connections) > 100:
                    logger.warning(f"[CLEANUP] –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {len(connections)}")
                    
                    # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
                    if hasattr(bot, 'session') and bot.session:
                        try:
                            await bot.session.close()
                            bot._session = None
                            logger.info("[CLEANUP] –°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞ –∏ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞")
                        except Exception as e:
                            logger.error(f"[CLEANUP] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞: {e}")
                    
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±–æ—Ä –º—É—Å–æ—Ä–∞
                    import gc
                    gc.collect()
        except Exception as e:
            logger.error(f"[CLEANUP] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {e}", exc_info=True)
    
    # –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    async def check_connections():
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API
        try:
            await asyncio.wait_for(bot.get_me(), timeout=5.0)
            logger.info("[CHECK] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API: OK")
            return True
        except Exception as e:
            logger.error(f"[CHECK] –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API: {e}")
            
            # –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é
            try:
                if hasattr(bot, 'session') and bot.session:
                    try:
                        await bot.session.close()
                    except Exception as close_e:
                        logger.warning(f"[CHECK] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏: {close_e}")
                
                # –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
                bot._session = None
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                if hasattr(aiohttp, 'ClientSession'):
                    try:
                        bot._session = aiohttp.ClientSession(
                            timeout=aiohttp.ClientTimeout(total=30.0, connect=10.0),
                            connector=aiohttp.TCPConnector(
                                force_close=True, 
                                limit=100, 
                                ttl_dns_cache=300,
                                enable_cleanup_closed=True
                            )
                        )
                    except Exception as session_e:
                        logger.error(f"[CHECK] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏: {session_e}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞
                await asyncio.sleep(1)
                await asyncio.wait_for(bot.get_me(), timeout=5.0)
                logger.info("[CHECK] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏")
                return True
            except Exception as retry_e:
                logger.error(f"[CHECK] –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: {retry_e}")
                return False
    
    async def watchdog():
        nonlocal polling_task
        consecutive_failures = 0
        cleanup_counter = 0
        while not stop_event.is_set():
            await asyncio.sleep(30)
            try:
                # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
                cleanup_counter += 1
                if cleanup_counter >= 10:  # 30 —Å–µ–∫ * 10 = 5 –º–∏–Ω—É—Ç
                    await cleanup_connections()
                    cleanup_counter = 0
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                async with last_update_lock:
                    since = time.time() - last_update_time

                # –ï—Å–ª–∏ –±–æ—Ç –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—Å—Ç–∞–∏–≤–∞–µ—Ç –±–µ–∑ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ.
                # –ë—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–æ–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–≤–Ω–æ –Ω–µ –±—ã–ª–æ –∞–ø–¥–µ–π—Ç–æ–≤
                # –ò –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Ñ–∏–∫—Å–∏—Ä—É—é—Ç—Å—è –æ—à–∏–±–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.
                connection_ok = False
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API –±—ã—Å—Ç—Ä—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
                    await asyncio.wait_for(bot.get_me(), timeout=5.0)
                    connection_ok = True
                    consecutive_failures = 0
                except Exception as e:
                    logger.error(f"[WATCHDOG] –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API: {e}")
                    consecutive_failures += 1
                
                                    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –¥–æ–ª–≥–æ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º
                # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º polling —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–∞–≤–Ω–æ –Ω–µ –±—ã–ª–æ (10 –º–∏–Ω—É—Ç),
                # –∏ –µ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.
                if (since > 600 and consecutive_failures >= 3) or consecutive_failures >= 5:
                    logger.error(f"[WATCHDOG] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞: –Ω–µ—Ç –∞–ø–¥–µ–π—Ç–æ–≤ {since:.0f} —Å–µ–∫—É–Ω–¥, –æ—à–∏–±–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {consecutive_failures}, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ polling...")
                    if polling_task and not polling_task.done():
                        logger.info(f"[WATCHDOG] polling_task –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è: {polling_task}")
                        try:
                            polling_task.cancel()
                            await asyncio.wait_for(polling_task, timeout=5.0)
                        except Exception as e:
                            logger.error(f"[WATCHDOG] –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ polling: {e}")
                            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É, –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
                            if consecutive_failures >= 2:
                                logger.critical("[WATCHDOG] –ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å polling, –∏–Ω–∏—Ü–∏–∏—Ä—É—é –ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫")
                                await shutdown(42)  # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                                return
                    
                    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ polling
                    try:
                        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ —á–∏—Å—Ç–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                        if hasattr(bot, 'session') and bot.session:
                            try:
                                await bot.session.close()
                                logger.info("[WATCHDOG] –°—Ç–∞—Ä–∞—è —Å–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")
                            except Exception as se:
                                logger.warning(f"[WATCHDOG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏: {se}")
                        
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
                        bot._session = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é, —á—Ç–æ–±—ã –æ–Ω–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–ª–∞—Å—å
                        
                        new_task = await start_polling()
                        logger.info("[WATCHDOG] polling –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
                        polling_task = new_task
                        await update_last_update_time()
                        consecutive_failures = 0
                    except Exception as e:
                        logger.error(f"[WATCHDOG] –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å polling: {e}")
                        consecutive_failures += 1
                        
                        # –ï—Å–ª–∏ –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞, –ø—Ä–æ–±—É–µ–º –ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
                        if consecutive_failures >= 5:
                            logger.critical("[WATCHDOG] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —á–∏—Å–ª–æ –æ—à–∏–±–æ–∫, –∏–Ω–∏—Ü–∏–∏—Ä—É—é –ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞")
                            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å —Å –∫–æ–¥–æ–º, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω –≤ run_bot()
                            await shutdown(42)  # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
            except Exception as e:
                logger.error(f"[WATCHDOG] –û—à–∏–±–∫–∞ –≤ watchdog: {e}", exc_info=True)
                consecutive_failures += 1
    
    try:
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API...")
        me = await bot.get_me()
        logger.info(f"–ë–æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ @{me.username} (ID: {me.id})")
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –ø–æ–ª–ª–∏–Ω–≥
        try:
            polling_task = await start_polling()
        except Exception as e:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–ª–∏–Ω–≥:", exc_info=e)
            raise
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        if setup_admin_commands:
            setup_admin_commands(dp, db, bot)
            logger.info("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∏ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        asyncio.create_task(log_diagnostics(polling_task, stop_event))
        asyncio.create_task(watchdog())
        auto_message_task = asyncio.create_task(send_auto_messages())
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        connection_failures = 0
        while not stop_event.is_set():
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª–ª–∏–Ω–≥–∞
                if polling_task.done():
                    if polling_task.exception():
                        logger.error(f"[POLLING] polling_task –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {polling_task.exception()}")
                        restart_attempts += 1
                        if restart_attempts > MAX_RESTART_ATTEMPTS:
                            logger.error(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ ({MAX_RESTART_ATTEMPTS}). –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
                            await shutdown(1)  # –ö–æ–¥ –æ—à–∏–±–∫–∏ 1
                            break
                        wait_time = RESTART_DELAY * (2 ** (restart_attempts - 1))  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                        logger.error(f"–ü–æ–ª–ª–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π. –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ {restart_attempts}/{MAX_RESTART_ATTEMPTS} —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫...", 
                                   exc_info=polling_task.exception())
                        await asyncio.sleep(wait_time)
                        polling_task = await start_polling()
                        continue
                
                # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
                if time.time() % 300 < 1:  # –ü—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç
                    if not await check_connections():
                        connection_failures += 1
                        if connection_failures >= 3:
                            logger.critical("[MAIN] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —á–∏—Å–ª–æ –æ—à–∏–±–æ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –∏–Ω–∏—Ü–∏–∏—Ä—É—é –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫")
                            await shutdown(42)  # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                            break
                    else:
                        connection_failures = 0
                    
                    # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∏ —Ä–µ—Å—É—Ä—Å–æ–≤
                    await cleanup_connections()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
                await asyncio.wait_for(stop_event.wait(), timeout=1.0)
            except asyncio.TimeoutError:
                continue
            except asyncio.CancelledError:
                 logger.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–º–µ–Ω—É –∑–∞–¥–∞—á–∏")
                 break
            except Exception as e:
                logger.error(f"[MAIN] –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}", exc_info=True)
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –∏ –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
                connection_failures += 1
                if connection_failures >= 5:
                    logger.critical("[MAIN] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —á–∏—Å–ª–æ –æ—à–∏–±–æ–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ, –∏–Ω–∏—Ü–∏–∏—Ä—É—é –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫")
                    await shutdown(42)  # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                    break
                await asyncio.sleep(5)
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        exit_code = 1  # –ö–æ–¥ –æ—à–∏–±–∫–∏
    finally:
        if not stop_event.is_set():
            await shutdown(exit_code)
        logger.info(f"–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å –∫–æ–¥–æ–º {exit_code}")
        return exit_code

def run_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç main() –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º —Ü–∏–∫–ª–µ, –∏—Å–ø–æ–ª—å–∑—É—è –û–î–ò–ù event loop.
    –≠—Ç–æ —É—Å—Ç—Ä–∞–Ω—è–µ—Ç –æ—à–∏–±–∫—É RuntimeError: <asyncio.Event> is bound to a different event loop,
    –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–Ω–∏–∫–∞–ª–∞ –∏–∑-–∑–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ.
    """
    import time

    restart_delay = 5
    max_restart_delay = 300  # 5 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    restart_count = 0

    # –°–æ–∑–¥–∞—ë–º –µ–¥–∏–Ω—ã–π event loop –∏ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è –≤—Å–µ—Ö –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    while True:
        try:
            logger.info(f"[RESTARTER] –ó–∞–ø—É—Å–∫ main()... (–ø–æ–ø—ã—Ç–∫–∞ #{restart_count + 1})")
            exit_code = loop.run_until_complete(main())

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            if exit_code == 0:
                # –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏
                logger.warning("[RESTARTER] –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —Å –∫–æ–¥–æ–º 0, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º.")
                restart_delay = 10
            elif exit_code == 42:
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–¥ —è–≤–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                logger.warning("[RESTARTER] –ü–æ–ª—É—á–µ–Ω –∫–æ–¥ 42, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞‚Ä¶")
                restart_delay = 5
            else:
                logger.error(
                    f"[RESTARTER] –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —Å –∫–æ–¥–æ–º {exit_code}, –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {restart_delay} —Å–µ–∫—É–Ω–¥")

        except KeyboardInterrupt:
            logger.info("[RESTARTER] KeyboardInterrupt ‚Äî –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
            break
        except BaseException as e:
            restart_count += 1
            logger.error(f"[RESTARTER] main() –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {e}", exc_info=True)

            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ, –Ω–æ –Ω–µ –≤—ã—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π
            restart_delay = min(restart_delay * 2, max_restart_delay)
            logger.info(
                f"[RESTARTER] –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {restart_delay} —Å–µ–∫—É–Ω–¥‚Ä¶ (–ø–æ–ø—ã—Ç–∫–∞ #{restart_count + 1})")

        # –ñ–¥—ë–º –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
        time.sleep(restart_delay)

if __name__ == "__main__":
    run_bot()