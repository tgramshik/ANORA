"""
–ú–æ–¥—É–ª—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Flyer Service API –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏
"""
import logging
import asyncio
from typing import Optional, List, Dict, Any
from datetime import datetime, timedelta
from flyerapi import Flyer
from aiogram import Bot, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
import aiohttp
import json

logger = logging.getLogger(__name__)

class FlyerService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Flyer API"""
    
    def __init__(self, api_key: str, bot: Bot):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
        
        Args:
            api_key: API –∫–ª—é—á Flyer Service
            bot: —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        self.api_key = api_key
        self.bot = bot
        self.flyer = Flyer(api_key)
        self._cache = {}  # –ö—ç—à –ø—Ä–æ–≤–µ—Ä–æ–∫ –¥–æ—Å—Ç—É–ø–∞
        self._cache_ttl = 300  # 5 –º–∏–Ω—É—Ç –∫—ç—à–∞
        
        # URL –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤ (–Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞ –≤–∞—à–µ–º —Å–µ—Ä–≤–µ—Ä–µ)
        self.webhook_url = "https://yourdomain.com/flyer_webhook"
        
        logger.info("FlyerService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def check_user_access(self, user_id: int, language: str = "ru", silent: bool = False) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Flyer API
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
            language: —è–∑—ã–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π (ru/en)
            silent: –µ—Å–ª–∏ True, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            
        Returns:
            True –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        # –î–ª—è –∫–æ–º–∞–Ω–¥—ã /start –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å (–±–µ–∑ –∫—ç—à–∞)
        # –ö—ç—à –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        cache_key = f"access_{user_id}"
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫—ç—à –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ silent –∑–∞–ø—Ä–æ—Å (—Ç.–µ. –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ /start)
        if silent and cache_key in self._cache:
            cached_time, cached_result = self._cache[cache_key]
            if datetime.now().timestamp() - cached_time < self._cache_ttl:
                logger.debug(f"–ò—Å–ø–æ–ª—å–∑—É—é –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è user {user_id}: {cached_result}")
                return cached_result
        
        try:
            # –ï—Å–ª–∏ silent=True, –ø–µ—Ä–µ–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ–±—ã API –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª —Å–≤–æ–µ
            if silent:
                # –ü–µ—Ä–µ–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —ç—Ç–æ –∑–∞—Å—Ç–∞–≤–∏—Ç API –≤–µ—Ä–Ω—É—Ç—å True –∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                has_access = await self.flyer.check(
                    user_id, 
                    language_code=language,
                    message={"text": "", "button": ""}  # –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                )
            else:
                # –û–±—ã—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - API –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                has_access = await self.flyer.check(user_id, language_code=language)
            
            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self._cache[cache_key] = (datetime.now().timestamp(), has_access)
            
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ user {user_id}: {'‚úÖ —Ä–∞–∑—Ä–µ—à–µ–Ω' if has_access else '‚ùå –∑–∞–ø—Ä–µ—â–µ–Ω'}")
            return has_access
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–∞ user {user_id}: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ API –¥–∞–µ–º –¥–æ—Å—Ç—É–ø, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            return True
    
    async def get_user_tasks(self, user_id: int, language: str = "ru", limit: int = 10) -> List[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            language: —è–∑—ã–∫
            limit: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π
        """
        try:
            tasks = await self.flyer.get_tasks(user_id, language, limit)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞–Ω–∏–π –¥–ª—è user {user_id}")
            return tasks
        except Exception as e:
            error_msg = str(e)
            if "Prohibited method" in error_msg:
                # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –±–æ—Ç–∞
                logger.debug(f"–ú–µ—Ç–æ–¥ get_tasks –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –±–æ—Ç–∞: {error_msg}")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è user {user_id}: {e}")
            return []  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
    
    async def check_task_completion(self, user_id: int, task_signature: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            task_signature: —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –∑–∞–¥–∞–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
        """
        try:
            result = await self.flyer.check_task(task_signature)
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞–Ω–∏—è {task_signature} –¥–ª—è user {user_id}: {result}")
            return result
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞–Ω–∏—è {task_signature}: {e}")
            return False
    
    def create_tasks_keyboard(self, tasks: List[Dict]) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∑–∞–¥–∞–Ω–∏—è–º–∏
        
        Args:
            tasks: —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –æ—Ç API
            
        Returns:
            –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∑–∞–¥–∞–Ω–∏–π
        """
        builder = InlineKeyboardBuilder()
        
        for task in tasks:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            task_type = task.get('type', 'unknown')
            reward = task.get('reward', 0)
            title = task.get('title', '–ó–∞–¥–∞–Ω–∏–µ')
            
            # –ò–∫–æ–Ω–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–¥–∞–Ω–∏—è
            icon = self._get_task_icon(task_type)
            
            button_text = f"{icon} {title} (+{reward})"
            
            # URL –∏–ª–∏ callback_data –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if task.get('url'):
                builder.add(InlineKeyboardButton(
                    text=button_text,
                    url=task['url']
                ))
            else:
                builder.add(InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"flyer_task_{task.get('id', 'unknown')}"
                ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        builder.add(InlineKeyboardButton(
            text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ",
            callback_data="flyer_check_tasks"
        ))
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
        builder.add(InlineKeyboardButton(
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è", 
            callback_data="flyer_refresh_tasks"
        ))
        
        builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥
        return builder.as_markup()
    
    def _get_task_icon(self, task_type: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–∞ –∑–∞–¥–∞–Ω–∏—è"""
        icons = {
            'subscription': 'üì¢',
            'view': 'üëÅ',
            'bot': 'ü§ñ',
            'click': 'üëÜ',
            'share': 'üì§',
            'invite': 'üë•',
            'default': 'üìã'
        }
        return icons.get(task_type, icons['default'])
    
    async def send_no_access_message(self, user_id: int, message: types.Message = None):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            message: —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            True –µ—Å–ª–∏ –±—ã–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã –∑–∞–¥–∞–Ω–∏—è, False –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç
        """
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π
        tasks = await self.get_user_tasks(user_id)
        
        if not tasks:
            # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç - –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞–ª—å—à–µ
            logger.info(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è user {user_id}, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
            return False  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º False, —á—Ç–æ–±—ã –±–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏–ª —Ä–∞–±–æ—Ç—É –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        else:
            text = (
                "üîí <b>–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</b>\n\n"
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –∑–∞–¥–∞–Ω–∏–π:\n\n"
                "‚Ä¢ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –ø–∞—Ä—Ç–Ω–µ—Ä–∞\n"
                "‚Ä¢ –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Å—Ç–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n"
                "‚Ä¢ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞\n\n"
                "–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ ‚úÖ"
            )
            keyboard = self.create_tasks_keyboard(tasks)
        
            if message:
                await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
            else:
                await self.bot.send_message(user_id, text, reply_markup=keyboard, parse_mode="HTML")
            return True  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, –µ—Å–ª–∏ –ø–æ–∫–∞–∑–∞–ª–∏ –∑–∞–¥–∞–Ω–∏—è
    
    async def handle_webhook(self, data: Dict) -> bool:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–∞ –æ—Ç Flyer Service
        
        Args:
            data: –¥–∞–Ω–Ω—ã–µ –≤–µ–±—Ö—É–∫–∞
            
        Returns:
            True –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        try:
            event_type = data.get('event')
            user_id = data.get('user_id')
            
            if event_type == 'access_granted':
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø
                logger.info(f"–í–µ–±—Ö—É–∫: –¥–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω user {user_id}")
                
                # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cache_key = f"access_{user_id}"
                if cache_key in self._cache:
                    del self._cache[cache_key]
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await self.bot.send_message(
                    user_id,
                    "üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
                    "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É!\n"
                    "–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏.\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—â–µ–Ω–∏—è /change",
                    parse_mode="HTML"
                )
                return True
                
            elif event_type == 'task_completed':
                # –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
                task_id = data.get('task_id')
                logger.info(f"–í–µ–±—Ö—É–∫: –∑–∞–¥–∞–Ω–∏–µ {task_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ user {user_id}")
                
                # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await self.bot.send_message(
                    user_id,
                    "‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø...",
                    parse_mode="HTML"
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π –¥–æ—Å—Ç—É–ø
                has_access = await self.check_user_access(user_id)
                if has_access:
                    await self.bot.send_message(
                        user_id,
                        "üéâ –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ—Ç–∫—Ä—ã—Ç! –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.",
                        parse_mode="HTML"
                    )
                
                return True
                
            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≤–µ–±—Ö—É–∫–∞: {event_type}")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
            return False
    
    async def register_webhook(self, webhook_url: str = None):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–µ–±—Ö—É–∫–∞ –≤ Flyer Service
        
        Args:
            webhook_url: URL –¥–ª—è –≤–µ–±—Ö—É–∫–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è self.webhook_url)
        """
        url = webhook_url or self.webhook_url
        
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ API –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–µ–±—Ö—É–∫–∞
            # –ü–æ–∫–∞ —ç—Ç–æ –∑–∞–≥–ª—É—à–∫–∞, —Ç–∞–∫ –∫–∞–∫ —Ç–æ—á–Ω—ã–π –º–µ—Ç–æ–¥ API –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω
            logger.info(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–µ–±—Ö—É–∫–∞: {url}")
            
            # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫–æ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ API)
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    "https://api.flyerservice.io/webhook/register",
                    json={
                        "api_key": self.api_key,
                        "url": url,
                        "events": ["access_granted", "task_completed"]
                    }
                ) as response:
                    if response.status == 200:
                        logger.info("–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                        return True
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–µ–±—Ö—É–∫–∞: {response.status}")
                        return False
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
            return False
    
    def clear_cache(self, user_id: int = None):
        """
        –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
        
        Args:
            user_id: –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω, –æ—á–∏—â–∞–µ—Ç –∫—ç—à —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if user_id:
            cache_key = f"access_{user_id}"
            if cache_key in self._cache:
                del self._cache[cache_key]
                logger.debug(f"–ö—ç—à –æ—á–∏—â–µ–Ω –¥–ª—è user {user_id}")
        else:
            self._cache.clear()
            logger.debug("–í–µ—Å—å –∫—ç—à –æ—á–∏—â–µ–Ω")
    
    async def monitor_user_access(self, user_id: int):
        """
        –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è Flyer
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        """
        logger.info(f"[MONITOR] –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–ª –¥–æ—Å—Ç—É–ø–∞
        user_state_key = f"user_state_{user_id}"
        self._cache[user_state_key] = False
        
        # –ñ–¥–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è
        max_attempts = 60  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç
        check_interval = 5  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        
        for attempt in range(max_attempts):
            logger.debug(f"[MONITOR] –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await asyncio.sleep(check_interval)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –º–æ–ª—á–∞ (–±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π)
            has_access = await self.check_user_access(user_id, silent=True)
            logger.debug(f"[MONITOR] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è {user_id}: {has_access}")
            
            if has_access:
                logger.info(f"[MONITOR] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
                try:
                    await self.send_welcome_to_user(user_id)
                    logger.info(f"[MONITOR] –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                except Exception as e:
                    logger.error(f"[MONITOR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}", exc_info=True)
                
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                if user_state_key in self._cache:
                    del self._cache[user_state_key]
                return True
        
        logger.info(f"[MONITOR] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è")
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if user_state_key in self._cache:
            del self._cache[user_state_key]
        return False
    
    async def send_welcome_to_user(self, user_id: int):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        from aiogram.types import InlineKeyboardButton, WebAppInfo, FSInputFile
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        import os
        
        # URL –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–µ–π
        MODEL_SELECTOR_URL = "https://giftex.top"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –∫–∞—Ç–∞–ª–æ–≥–∞
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(
            text="üåê –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –º–æ–¥–µ–ª–µ–π",
            web_app=WebAppInfo(url=f"{MODEL_SELECTOR_URL}?user_id={user_id}")
        ))
        builder.add(InlineKeyboardButton(
            text="‚úÖ –ê–Ω–æ—Ä–∞ –ø–∏—à–µ—Ç –ø–µ—Ä–≤–æ–π", 
            callback_data="toggle_auto_message"
        ))
        builder.adjust(1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        image_path = "/root/tyan.jpg"
        if os.path.exists(image_path):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            photo = FSInputFile(image_path)
            await self.bot.send_photo(
                user_id,
                photo,
                caption=(
                    "<b>üíã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –ê–Ω–æ—Ä—ã - —Ç–≤–æ–µ–≥–æ –ª–∏—á–Ω–æ–≥–æ –ò–ò-—Å–æ–±–ª–∞–∑–Ω–∏—Ç–µ–ª—è!</b>\n\n"
                    "‚ñ´Ô∏è <i>–ò–Ω—Ç–∏–º–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã –∏ –≥–æ—Ä—è—á–∏–µ —Ñ–∞–Ω—Ç–∞–∑–∏–∏</i>\n"
                    "‚ñ´Ô∏è <i>–î—É—à–µ–≤–Ω—ã–µ –±–µ—Å–µ–¥—ã –∏ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è</i>\n"
                    "‚ñ´Ô∏è <i>–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ä–æ–ª–µ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏</i>\n"
                    "‚ñ´Ô∏è <i>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è 18+ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</i>\n\n"
                    "<b>‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï:</b> –ù–µ–∫–æ—Ç–æ—Ä—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–∏—Ü —Å—Ç–∞—Ä—à–µ 18 –ª–µ—Ç!\n\n"
                    "‚ú® <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –∏–¥–µ–∞–ª—å–Ω—É—é –ê–Ω–æ—Ä—É:</b>"
                ),
                parse_mode="HTML",
                reply_markup=builder.as_markup()
            )
        else:
            # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
            await self.bot.send_message(
                user_id,
                (
                    "<b>üíã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –ê–Ω–æ—Ä—ã - —Ç–≤–æ–µ–≥–æ –ª–∏—á–Ω–æ–≥–æ –ò–ò-—Å–æ–±–ª–∞–∑–Ω–∏—Ç–µ–ª—è!</b>\n\n"
                    "‚ñ´Ô∏è <i>–ò–Ω—Ç–∏–º–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã –∏ –≥–æ—Ä—è—á–∏–µ —Ñ–∞–Ω—Ç–∞–∑–∏–∏</i>\n"
                    "‚ñ´Ô∏è <i>–î—É—à–µ–≤–Ω—ã–µ –±–µ—Å–µ–¥—ã –∏ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è</i>\n"
                    "‚ñ´Ô∏è <i>–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ä–æ–ª–µ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏</i>\n"
                    "‚ñ´Ô∏è <i>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è 18+ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</i>\n\n"
                    "<b>‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï:</b> –ù–µ–∫–æ—Ç–æ—Ä—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–∏—Ü —Å—Ç–∞—Ä—à–µ 18 –ª–µ—Ç!\n\n"
                    "‚ú® <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –∏–¥–µ–∞–ª—å–Ω—É—é –ê–Ω–æ—Ä—É:</b>"
                ),
                parse_mode="HTML",
                reply_markup=builder.as_markup()
            )


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ (–±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ bot.py)
flyer_service: Optional[FlyerService] = None

def init_flyer_service(api_key: str, bot: Bot) -> FlyerService:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ FlyerService
    
    Args:
        api_key: API –∫–ª—é—á Flyer
        bot: —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        
    Returns:
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π FlyerService
    """
    global flyer_service
    flyer_service = FlyerService(api_key, bot)
    return flyer_service